[
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Run Streamlit apps](#run-streamlit-apps)\n3. [View Streamlit version](#view-streamlit-version)\n4. [View documentation](#view-documentation)\n5. [Clear cache](#clear-cache)\n6. [View all configuration options](#view-all-configuration-options)\n\n# Command-line interface\n\nWhen you install Streamlit, a command-line (CLI) tool gets installed\nas well. The purpose of this tool is to run Streamlit apps, change Streamlit configuration options,\nand help you diagnose and fix issues.\n\nTo see all of the supported commands:\n\n`streamlit --help\n`\n\n### Run Streamlit apps\n\n`streamlit run your_script.py [-- script args]\n`\n\nRuns your app. At any time you can stop the server with **Ctrl+c**.\n\n_push\\_pin_\n\n#### Note\n\nWhen passing your script some custom arguments, **they must be passed after**\n**two dashes**. Otherwise the arguments get interpreted as arguments to Streamlit\nitself.\n\nTo see the Streamlit 'Hello, World!' example app, run `streamlit hello`.\n\n### View Streamlit version\n\nTo see what version of Streamlit is installed, just type:\n\n`streamlit version\n`\n\n### View documentation\n\n`streamlit docs\n`\n\nOpens the Streamlit documentation (i.e. this website) in a web browser.\n\n### Clear cache\n\n`streamlit cache clear\n`\n\nClears persisted files from the on-disk [Streamlit cache](/develop/api-reference/caching-and-state), if\npresent.\n\n### View all configuration options\n\nAs described in [Configuration](/develop/concepts/configuration), Streamlit has several\nconfiguration options. To view them all, including their current values, just type:\n\n`streamlit config show\n`\n\n[Previous: App testing](/develop/api-reference/app-testing) [Next: streamlit run](/develop/api-reference/cli/run)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/cli",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Command-line options - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Command-line options - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Command-line options - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/cli",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Command-line options - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Chat elements\n\nStreamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.\n\n`st.chat_message` lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. `st.chat_input` lets you display a chat input widget so the user can type in a message. Remember to check out `st.status` to display output from long-running processes and external API calls.\n\n[![screenshot](/images/api/chat_input.jpg)**Chat input** \\\\\nDisplay a chat input widget.\\\\\n\\\\\n`prompt = st.chat_input(\"Say something\")\\\\\nif prompt:\\\\\n    st.write(f\"The user has sent: {prompt}\")\\\\\n`](/develop/api-reference/chat/st.chat_input) [![screenshot](/images/api/chat_message.jpg)**Chat message** \\\\\nInsert a chat message container.\\\\\n\\\\\n`import numpy as np\\\\\nwith st.chat_message(\"user\"):\\\\\n    st.write(\"Hello üëã\")\\\\\n    st.line_chart(np.random.randn(30, 3))\\\\\n`](/develop/api-reference/chat/st.chat_message) [![screenshot](/images/api/status.jpg)**Status container** \\\\\nDisplay output of long-running tasks in a container.\\\\\n\\\\\n`with st.status('Running'):\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.status) [**st.write\\_stream** \\\\\nWrite generators or streams to the app with a typewriter effect.\\\\\n\\\\\n`st.write_stream(my_generator)\\\\\nst.write_stream(my_llm_stream)\\\\\n`](/develop/api-reference/write-magic/st.write_stream)[Previous: Layouts and containers](/develop/api-reference/layout) [Next: st.chat\\_input](/develop/api-reference/chat/st.chat_input)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/chat",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Chat elements - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Chat elements - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Chat elements - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/chat",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Chat elements - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# st.write and magic commands\n\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: `st.write` and magic.\n\n[**st.write** \\\\\nWrite arguments to the app.\\\\\n\\\\\n`st.write(\"Hello **world**!\")\\\\\nst.write(my_data_frame)\\\\\nst.write(my_mpl_figure)\\\\\n`](/develop/api-reference/write-magic/st.write) [**st.write\\_stream** \\\\\nWrite generators or streams to the app with a typewriter effect.\\\\\n\\\\\n`st.write_stream(my_generator)\\\\\nst.write_stream(my_llm_stream)\\\\\n`](/develop/api-reference/write-magic/st.write_stream) [**Magic** \\\\\nAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using `st.write`\\\\\n\\\\\n`\"Hello **world**!\"\\\\\nmy_data_frame\\\\\nmy_mpl_figure\\\\\n`](/develop/api-reference/write-magic/magic)[Previous: API reference](/develop/api-reference) [Next: st.write](/develop/api-reference/write-magic/st.write)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/write-magic",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "st.write and magic commands - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "st.write and magic commands - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "st.write and magic commands - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/write-magic",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "st.write and magic commands - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Utilities and user info\n\nThere are a handful of methods that allow you to create placeholders in your\napp, provide help using doc strings, get and modify configuration options and query parameters.\n\n[**Context** \\\\\n`st.context` provides a read-only interface to access cookies and headers.\\\\\n\\\\\n`st.context.cookies\\\\\nst.context.headers\\\\\n`](/develop/api-reference/utilities/st.context) [**Get help** \\\\\nDisplay object‚Äôs doc string, nicely formatted.\\\\\n\\\\\n`st.help(st.write)\\\\\nst.help(pd.DataFrame)\\\\\n`](/develop/api-reference/utilities/st.help) [**Render HTML** \\\\\nRenders HTML strings to your app.\\\\\n\\\\\n`st.html(\"<p>Foo bar.</p>\")\\\\\n`](/develop/api-reference/utilities/st.html) [**User info** \\\\\n`st.experimental_user` returns information about the logged-in user of private apps on Streamlit Community Cloud.\\\\\n\\\\\n`if st.experimental_user.email == \"foo@corp.com\":\\\\\nst.write(\"Welcome back, \", st.experimental_user.email)\\\\\nelse:\\\\\nst.write(\"You are not authorized to view this page.\")\\\\\n`](/develop/api-reference/utilities/st.experimental_user)[Previous: Custom components](/develop/api-reference/custom-components) [Next: st.context](/develop/api-reference/utilities/st.context)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/utilities",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Utilities and user info - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Utilities and user info - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Utilities and user info - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/utilities",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Utilities and user info - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Layouts and Containers\n\n## Complex layouts\n\nStreamlit provides several options for controlling how different elements are laid out on the screen.\n\n[![screenshot](/images/api/columns.jpg)**Columns** \\\\\nInsert containers laid out as side-by-side columns.\\\\\n\\\\\n`col1, col2 = st.columns(2)\\\\\ncol1.write(\"this is column 1\")\\\\\ncol2.write(\"this is column 2\")\\\\\n`](/develop/api-reference/layout/st.columns) [![screenshot](/images/api/container.jpg)**Container** \\\\\nInsert a multi-element container.\\\\\n\\\\\n`c = st.container()\\\\\nst.write(\"This will show last\")\\\\\nc.write(\"This will show first\")\\\\\nc.write(\"This will show second\")\\\\\n`](/develop/api-reference/layout/st.container) [![screenshot](/images/api/dialog.jpg)**Modal dialog** \\\\\nInsert a modal dialog that can rerun independently from the rest of the script.\\\\\n\\\\\n`@st.dialog(\"Sign up\")\\\\\ndef email_form():\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n`](/develop/api-reference/execution-flow/st.dialog) [![screenshot](/images/api/empty.jpg)**Empty** \\\\\nInsert a single-element container.\\\\\n\\\\\n`c = st.empty()\\\\\nst.write(\"This will show last\")\\\\\nc.write(\"This will be replaced\")\\\\\nc.write(\"This will show first\")\\\\\n`](/develop/api-reference/layout/st.empty) [![screenshot](/images/api/expander.jpg)**Expander** \\\\\nInsert a multi-element container that can be expanded/collapsed.\\\\\n\\\\\n`with st.expander(\"Open to see more\"):\\\\\nst.write(\"This is more content\")\\\\\n`](/develop/api-reference/layout/st.expander) [![screenshot](/images/api/popover.svg)**Popover** \\\\\nInsert a multi-element popover container that can be opened/closed.\\\\\n\\\\\n`with st.popover(\"Settings\"):\\\\\nst.checkbox(\"Show completed\")\\\\\n`](/develop/api-reference/layout/st.popover) [![screenshot](/images/api/sidebar.jpg)**Sidebar** \\\\\nDisplay items in a sidebar.\\\\\n\\\\\n`st.sidebar.write(\"This lives in the sidebar\")\\\\\nst.sidebar.button(\"Click me!\")\\\\\n`](/develop/api-reference/layout/st.sidebar) [![screenshot](/images/api/tabs.jpg)**Tabs** \\\\\nInsert containers separated into tabs.\\\\\n\\\\\n`tab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\\\\\ntab1.write(\"this is tab 1\")\\\\\ntab2.write(\"this is tab 2\")\\\\\n`](/develop/api-reference/layout/st.tabs)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/elements.jpg)**Streamlit Elements**](https://github.com/okld/streamlit-elements)\n\n[Create a draggable and resizable dashboard in Streamlit. Created by](https://github.com/okld/streamlit-elements) [@okls](https://github.com/okls).\n\n`from streamlit_elements import elements, mui, html\nwith elements(\"new_element\"):\nmui.Typography(\"Hello world\")\n`\n\n[![screenshot](/images/api/components/pydantic.jpg)**Pydantic**](https://github.com/lukasmasuch/streamlit-pydantic)\n\n[Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by](https://github.com/lukasmasuch/streamlit-pydantic) [@lukasmasuch](https://github.com/lukasmasuch).\n\n`import streamlit_pydantic as sp\nsp.pydantic_form(key=\"my_form\",\nmodel=ExampleModel)\n`\n\n[![screenshot](/images/api/components/pages.jpg)**Streamlit Pages**](https://github.com/blackary/st_pages)\n\n[An experimental version of Streamlit Multi-Page Apps. Created by](https://github.com/blackary/st_pages) [@blackary](https://github.com/blackary).\n\n`from st_pages import Page, show_pages, add_page_title\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"üè†\"),\\\nPage(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n`\n\n[Previous: Media elements](/develop/api-reference/media) [Next: st.columns](/develop/api-reference/layout/st.columns)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/layout",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Layouts and Containers - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Layouts and Containers - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Layouts and Containers - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/layout",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Layouts and Containers - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Configuration\n\n[**Configuration file** \\\\\nConfigures the default settings for your app.\\\\\n\\\\\n`your-project/\\\\\n‚îú‚îÄ‚îÄ .streamlit/\\\\\n‚îÇ   ‚îî‚îÄ‚îÄ config.toml\\\\\n‚îî‚îÄ‚îÄ your_app.py\\\\\n`](/develop/api-reference/configuration/config.toml) [**Get config option** \\\\\nRetrieve a single configuration option.\\\\\n\\\\\n`st.get_option(\"theme.primaryColor\")\\\\\n`](/develop/api-reference/configuration/st.get_option) [**Set config option** \\\\\nSet a single configuration option. (This is very limited.)\\\\\n\\\\\n`st.set_option(\"deprecation.showPyplotGlobalUse\", False)\\\\\n`](/develop/api-reference/configuration/st.set_option) [**Set page title, favicon, and more** \\\\\nConfigures the default settings of the page.\\\\\n\\\\\n`st.set_page_config(\\\\\npage_title=\"My app\",\\\\\npage_icon=\":shark:\",\\\\\n)\\\\\n`](/develop/api-reference/configuration/st.set_page_config)[Previous: Utilities](/develop/api-reference/utilities) [Next: config.toml](/develop/api-reference/configuration/config.toml)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/configuration",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Configuration - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Configuration - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Configuration - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/configuration",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Configuration - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Caching](#caching)\n3. [Manage state](#manage-state)\n4. [Deprecated commands](#deprecated-commands)\n\n# Caching and state\n\nOptimize performance and add statefulness to your app!\n\n## Caching\n\nStreamlit provides powerful [cache primitives](/develop/concepts/architecture/caching) for data and global resources. They allow your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.\n\n[**Cache data** \\\\\nFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).\\\\\n\\\\\n`@st.cache_data\\\\\ndef long_function(param1, param2):\\\\\n# Perform expensive computation here or\\\\\n# fetch data from the web here\\\\\nreturn data\\\\\n`](/develop/api-reference/caching-and-state/st.cache_data) [**Cache resource** \\\\\nFunction decorator to cache functions that return global resources (e.g. database connections, ML models).\\\\\n\\\\\n`@st.cache_resource\\\\\ndef init_model():\\\\\n# Return a global resource here\\\\\nreturn pipeline(\\\\\n    \"sentiment-analysis\",\\\\\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\\\\\n)\\\\\n`](/develop/api-reference/caching-and-state/st.cache_resource)\n\n## Manage state\n\nStreamlit re-executes your script with each user interaction. Widgets have built-in statefulness between reruns, but Session State lets you do more!\n\n[**Session State** \\\\\nSave data between reruns and across pages.\\\\\n\\\\\n`st.session_state[\"foo\"] = \"bar\"\\\\\n`](/develop/api-reference/caching-and-state/st.session_state) [**Query parameters** \\\\\nGet, set, or clear the query parameters that are shown in the browser's URL bar.\\\\\n\\\\\n`st.query_params[key] = value\\\\\nst.query_params.clear()\\\\\n`](/develop/api-reference/caching-and-state/st.query_params)\n\n## Deprecated commands\n\n[_delete_\\\\\n\\\\\n> This command was deprecated in version 1.18.0. Use `st.cache_data` instead.\\\\\n\\\\\n**Memo** \\\\\nExperimental function decorator to memoize function executions.\\\\\n\\\\\n`@st.experimental_memo\\\\\ndef fetch_and_clean_data(url):\\\\\n# Fetch data from URL here, and then clean it up.\\\\\nreturn data\\\\\n`](/develop/api-reference/caching-and-state/st.experimental_memo) [_delete_\\\\\n\\\\\n> This command was deprecated in version 1.18.0. Use `st.cache_resource` instead.\\\\\n\\\\\n**Singleton** \\\\\nExperimental function decorator to store singleton objects.\\\\\n\\\\\n`@st.experimental_singleton\\\\\ndef get_database_session(url):\\\\\n# Create a database session object that points to the URL.\\\\\nreturn session\\\\\n`](/develop/api-reference/caching-and-state/st.experimental_singleton) [_delete_\\\\\n**Get query parameters** \\\\\nGet query parameters that are shown in the browser's URL bar.\\\\\n\\\\\n`param_dict = st.experimental_get_query_params()\\\\\n`](/develop/api-reference/caching-and-state/st.experimental_get_query_params) [_delete_\\\\\n**Set query parameters** \\\\\nSet query parameters that are shown in the browser's URL bar.\\\\\n\\\\\n`st.experimental_set_query_params(\\\\\n{\"show_all\"=True, \"selected\"=[\"asia\", \"america\"]}\\\\\n)\\\\\n`](/develop/api-reference/caching-and-state/st.experimental_set_query_params)[Previous: Execution flow](/develop/api-reference/execution-flow) [Next: st.cache\\_data](/develop/api-reference/caching-and-state/st.cache_data)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Caching and state - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Caching and state - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Caching and state - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/caching-and-state",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Caching and state - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Simple chart elements](#simple-chart-elements)\n3. [Advanced chart elements](#advanced-chart-elements)\n\n# Chart elements\n\nStreamlit supports several different charting libraries, and our goal is to\ncontinually add support for more. Right now, the most basic library in our\narsenal is [Matplotlib](https://matplotlib.org/). Then there are also\ninteractive charting libraries like [Vega\\\\\nLite](https://vega.github.io/vega-lite/) (2D charts) and\n[deck.gl](https://github.com/uber/deck.gl) (maps and 3D charts). And\nfinally we also provide a few chart types that are \"native\" to Streamlit,\nlike `st.line_chart` and `st.area_chart`.\n\n## Simple chart elements\n\n[![screenshot](/images/api/area_chart.jpg)**Simple area charts** \\\\\nDisplay an area chart.\\\\\n\\\\\n`st.area_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.area_chart) [![screenshot](/images/api/bar_chart.jpg)**Simple bar charts** \\\\\nDisplay a bar chart.\\\\\n\\\\\n`st.bar_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.bar_chart) [![screenshot](/images/api/line_chart.jpg)**Simple line charts** \\\\\nDisplay a line chart.\\\\\n\\\\\n`st.line_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.line_chart) [![screenshot](/images/api/scatter_chart.svg)**Simple scatter charts** \\\\\nDisplay a line chart.\\\\\n\\\\\n`st.scatter_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.scatter_chart) [![screenshot](/images/api/map.jpg)**Scatterplots on maps** \\\\\nDisplay a map with points on it.\\\\\n\\\\\n`st.map(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.map)\n\n## Advanced chart elements\n\n[![screenshot](/images/api/pyplot.jpg)**Matplotlib** \\\\\nDisplay a matplotlib.pyplot figure.\\\\\n\\\\\n`st.pyplot(my_mpl_figure)\\\\\n`](/develop/api-reference/charts/st.pyplot) [![screenshot](/images/api/vega_lite_chart.jpg)**Altair** \\\\\nDisplay a chart using the Altair library.\\\\\n\\\\\n`st.altair_chart(my_altair_chart)\\\\\n`](/develop/api-reference/charts/st.altair_chart) [![screenshot](/images/api/vega_lite_chart.jpg)**Vega-Lite** \\\\\nDisplay a chart using the Vega-Lite library.\\\\\n\\\\\n`st.vega_lite_chart(my_vega_lite_chart)\\\\\n`](/develop/api-reference/charts/st.vega_lite_chart) [![screenshot](/images/api/plotly_chart.jpg)**Plotly** \\\\\nDisplay an interactive Plotly chart.\\\\\n\\\\\n`st.plotly_chart(my_plotly_chart)\\\\\n`](/develop/api-reference/charts/st.plotly_chart) [![screenshot](/images/api/bokeh_chart.jpg)**Bokeh** \\\\\nDisplay an interactive Bokeh chart.\\\\\n\\\\\n`st.bokeh_chart(my_bokeh_chart)\\\\\n`](/develop/api-reference/charts/st.bokeh_chart) [![screenshot](/images/api/pydeck_chart.jpg)**PyDeck** \\\\\nDisplay a chart using the PyDeck library.\\\\\n\\\\\n`st.pydeck_chart(my_pydeck_chart)\\\\\n`](/develop/api-reference/charts/st.pydeck_chart) [![screenshot](/images/api/graphviz_chart.jpg)**GraphViz** \\\\\nDisplay a graph using the dagre-d3 library.\\\\\n\\\\\n`st.graphviz_chart(my_graphviz_spec)\\\\\n`](/develop/api-reference/charts/st.graphviz_chart)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-chart-annotations.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`chart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n`\n\n[![screenshot](/images/api/components/plost.jpg)**Plost**](https://github.com/tvst/plost)\n\n[A deceptively simple plotting library for Streamlit. Created by](https://github.com/tvst/plost) [@tvst](https://github.com/tvst).\n\n`import plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n`\n\n[![screenshot](/images/api/components/hiplot.jpg)**HiPlot**](https://github.com/facebookresearch/hiplot)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/facebookresearch/hiplot) [@facebookresearch](https://github.com/facebookresearch).\n\n`data = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n`\n\n[![screenshot](/images/api/components/echarts.jpg)**ECharts**](https://github.com/andfanilo/streamlit-echarts)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/andfanilo/streamlit-echarts) [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_echarts import st_echarts\nst_echarts(options=options)\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/spacy.jpg)**Spacy-Streamlit**](https://github.com/explosion/spacy-streamlit)\n\n[spaCy building blocks and visualizers for Streamlit apps. Created by](https://github.com/explosion/spacy-streamlit) [@explosion](https://github.com/explosion).\n\n`models = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n`\n\n[![screenshot](/images/api/components/agraph.jpg)**Streamlit Agraph**](https://github.com/ChrisDelClea/streamlit-agraph)\n\n[A Streamlit Graph Vis, based on](https://github.com/ChrisDelClea/streamlit-agraph) [react-grah-vis](https://github.com/crubier/react-graph-vis). Created by [@ChrisDelClea](https://github.com/ChrisDelClea).\n\n`from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-chart-annotations.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`chart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n`\n\n[![screenshot](/images/api/components/plost.jpg)**Plost**](https://github.com/tvst/plost)\n\n[A deceptively simple plotting library for Streamlit. Created by](https://github.com/tvst/plost) [@tvst](https://github.com/tvst).\n\n`import plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n`\n\n[![screenshot](/images/api/components/hiplot.jpg)**HiPlot**](https://github.com/facebookresearch/hiplot)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/facebookresearch/hiplot) [@facebookresearch](https://github.com/facebookresearch).\n\n`data = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n`\n\n[![screenshot](/images/api/components/echarts.jpg)**ECharts**](https://github.com/andfanilo/streamlit-echarts)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/andfanilo/streamlit-echarts) [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_echarts import st_echarts\nst_echarts(options=options)\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/spacy.jpg)**Spacy-Streamlit**](https://github.com/explosion/spacy-streamlit)\n\n[spaCy building blocks and visualizers for Streamlit apps. Created by](https://github.com/explosion/spacy-streamlit) [@explosion](https://github.com/explosion).\n\n`models = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n`\n\n[![screenshot](/images/api/components/agraph.jpg)**Streamlit Agraph**](https://github.com/ChrisDelClea/streamlit-agraph)\n\n[A Streamlit Graph Vis, based on](https://github.com/ChrisDelClea/streamlit-agraph) [react-grah-vis](https://github.com/crubier/react-graph-vis). Created by [@ChrisDelClea](https://github.com/ChrisDelClea).\n\n`from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-chart-annotations.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`chart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n`\n\nNext\n\n[Previous: Data elements](/develop/api-reference/data) [Next: st.area\\_chart](/develop/api-reference/charts/st.area_chart)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/charts",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Chart elements - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Chart elements - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Chart elements - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/charts",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Chart elements - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [The AppTest class](#the-apptest-class)\n3. [Testing-element classes](#testing-element-classes)\n\n# App testing\n\nStreamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness.\n\nThe provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. It can be used to write automated tests of an app in various scenarios. These can then be run using a tool like pytest. A typical pattern is to build a suite of tests for an app that ensure consistent functionality as the app evolves, and run the tests locally and/or in a CI environment like Github Actions.\n\n## The AppTest class\n\n[**st.testing.v1.AppTest** \\\\\n`st.testing.v1.AppTest` simulates a running Streamlit app for testing.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\nat = AppTest.from_file(\"streamlit_app.py\")\\\\\nat.secrets[\"WORD\"] = \"Foobar\"\\\\\nat.run()\\\\\nassert not at.exception\\\\\nat.text_input(\"word\").input(\"Bazbat\").run()\\\\\nassert at.warning[0].value == \"Try again.\"\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest) [**AppTest.from\\_file** \\\\\n`st.testing.v1.AppTest.from_file` initializes a simulated app from a file.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\nat = AppTest.from_file(\"streamlit_app.py\")\\\\\nat.secrets[\"WORD\"] = \"Foobar\"\\\\\nat.run()\\\\\nassert not at.exception\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_file) [**AppTest.from\\_string** \\\\\n`st.testing.v1.AppTest.from_string` initializes a simulated app from a string.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\napp_script = \"\"\"\\\\\nimport streamlit as st\\\\\nword_of_the_day = st.text_input(\"What's the word of the day?\", key=\"word\")\\\\\nif word_of_the_day == st.secrets[\"WORD\"]:\\\\\n    st.success(\"That's right!\")\\\\\nelif word_of_the_day and word_of_the_day != st.secrets[\"WORD\"]:\\\\\n    st.warn(\"Try again.\")\\\\\n\"\"\"\\\\\nat = AppTest.from_string(app_script)\\\\\nat.secrets[\"WORD\"] = \"Foobar\"\\\\\nat.run()\\\\\nassert not at.exception\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_string) [**AppTest.from\\_function** \\\\\n`st.testing.v1.AppTest.from_function` initializes a simulated app from a function.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\ndef app_script ():\\\\\n    import streamlit as st\\\\\n    word_of_the_day = st.text_input(\"What's the word of the day?\", key=\"word\")\\\\\n    if word_of_the_day == st.secrets[\"WORD\"]:\\\\\n        st.success(\"That's right!\")\\\\\n    elif word_of_the_day and word_of_the_day != st.secrets[\"WORD\"]:\\\\\n        st.warn(\"Try again.\")\\\\\nat = AppTest.from_function(app_script)\\\\\nat.secrets[\"WORD\"] = \"Foobar\"\\\\\nat.run()\\\\\nassert not at.exception\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function)\n\n## Testing-element classes\n\n[**Block** \\\\\nA representation of container elements, including:\\\\\n\\\\\n- `st.chat_message`\\\\\n- `st.columns`\\\\\n- `st.sidebar`\\\\\n- `st.tabs`\\\\\n- The main body of the app.\\\\\n\\\\\n`# at.sidebar returns a Block\\\\\nat.sidebar.button[0].click().run()\\\\\nassert not at.exception\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeblock) [**Element** \\\\\nThe base class for representation of all elements, including:\\\\\n\\\\\n- `st.title`\\\\\n- `st.header`\\\\\n- `st.markdown`\\\\\n- `st.dataframe`\\\\\n\\\\\n`# at.title returns a sequence of Title\\\\\n# Title inherits from Element\\\\\nassert at.title[0].value == \"My awesome app\"\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeelement) [**Button** \\\\\nA representation of `st.button` and `st.form_submit_button`.\\\\\n\\\\\n`at.button[0].click().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treebutton) [**ChatInput** \\\\\nA representation of `st.chat_input`.\\\\\n\\\\\n`at.chat_input[0].set_value(\"What is Streamlit?\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treechatinput) [**Checkbox** \\\\\nA representation of `st.checkbox`.\\\\\n\\\\\n`at.checkbox[0].check().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecheckbox) [**ColorPicker** \\\\\nA representation of `st.color_picker`.\\\\\n\\\\\n`at.color_picker[0].pick(\"#FF4B4B\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecolorpicker) [**DateInput** \\\\\nA representation of `st.date_input`.\\\\\n\\\\\n`release_date = datetime.date(2023, 10, 26)\\\\\nat.date_input[0].set_value(release_date).run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treedateinput) [**Multiselect** \\\\\nA representation of `st.multiselect`.\\\\\n\\\\\n`at.multiselect[0].select(\"New York\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treemultiselect) [**NumberInput** \\\\\nA representation of `st.number_input`.\\\\\n\\\\\n`at.number_input[0].increment().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treenumberinput) [**Radio** \\\\\nA representation of `st.radio`.\\\\\n\\\\\n`at.radio[0].set_value(\"New York\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeradio) [**SelectSlider** \\\\\nA representation of `st.select_slider`.\\\\\n\\\\\n`at.select_slider[0].set_range(\"A\",\"C\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectslider) [**Selectbox** \\\\\nA representation of `st.selectbox`.\\\\\n\\\\\n`at.selectbox[0].select(\"New York\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectbox) [**Slider** \\\\\nA representation of `st.slider`.\\\\\n\\\\\n`at.slider[0].set_range(2,5).run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeslider) [**TextArea** \\\\\nA representation of `st.text_area`.\\\\\n\\\\\n`at.text_area[0].input(\"Streamlit is awesome!\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextarea) [**TextInput** \\\\\nA representation of `st.text_input`.\\\\\n\\\\\n`at.text_input[0].input(\"Streamlit\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextinput) [**TimeInput** \\\\\nA representation of `st.time_input`.\\\\\n\\\\\n`at.time_input[0].increment().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetimeinput) [**Toggle** \\\\\nA representation of `st.toggle`.\\\\\n\\\\\n`at.toggle[0].set_value(\"True\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetoggle)[Previous: Configuration](/develop/api-reference/configuration) [Next: st.testing.v1.AppTest](/develop/api-reference/app-testing/st.testing.v1.apptest)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/app-testing",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "App testing - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "App testing - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "App testing - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/app-testing",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "App testing - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Button elements](#button-elements)\n3. [Selection elements](#selection-elements)\n4. [Numeric input elements](#numeric-input-elements)\n5. [Date and time input elements](#date-and-time-input-elements)\n6. [Text input elements](#text-input-elements)\n7. [Other input elements](#other-input-elements)\n\n# Input widgets\n\nWith widgets, Streamlit allows you to bake interactivity directly into your apps with buttons, sliders, text inputs, and more.\n\n## Button elements\n\n[![screenshot](/images/api/button.svg)**Button** \\\\\nDisplay a button widget.\\\\\n\\\\\n`clicked = st.button(\"Click me\")\\\\\n`](/develop/api-reference/widgets/st.button) [![screenshot](/images/api/download_button.svg)**Download button** \\\\\nDisplay a download button widget.\\\\\n\\\\\n`st.download_button(\"Download file\", file)\\\\\n`](/develop/api-reference/widgets/st.download_button) [![screenshot](/images/api/form_submit_button.svg)**Form button** \\\\\nDisplay a form submit button. For use with `st.form`.\\\\\n\\\\\n`st.form_submit_button(\"Sign up\")\\\\\n`](/develop/api-reference/execution-flow/st.form_submit_button) [![screenshot](/images/api/link_button.svg)**Link button** \\\\\nDisplay a link button.\\\\\n\\\\\n`st.link_button(\"Go to gallery\", url)\\\\\n`](/develop/api-reference/widgets/st.link_button) [![screenshot](/images/api/page_link.jpg)**Page link** \\\\\nDisplay a link to another page in a multipage app.\\\\\n\\\\\n`st.page_link(\"app.py\", label=\"Home\", icon=\"üè†\")\\\\\nst.page_link(\"pages/profile.py\", label=\"My profile\")\\\\\n`](/develop/api-reference/widgets/st.page_link)\n\n## Selection elements\n\n[![screenshot](/images/api/checkbox.jpg)**Checkbox** \\\\\nDisplay a checkbox widget.\\\\\n\\\\\n`selected = st.checkbox(\"I agree\")\\\\\n`](/develop/api-reference/widgets/st.checkbox) [![screenshot](/images/api/color_picker.jpg)**Color picker** \\\\\nDisplay a color picker widget.\\\\\n\\\\\n`color = st.color_picker(\"Pick a color\")\\\\\n`](/develop/api-reference/widgets/st.color_picker) [![screenshot](/images/api/feedback.jpg)**Feedback** \\\\\nDisplay a rating or sentiment button group.\\\\\n\\\\\n`st.feedback(\"stars\")\\\\\n`](/develop/api-reference/widgets/st.feedback) [![screenshot](/images/api/multiselect.jpg)**Multiselect** \\\\\nDisplay a multiselect widget. The multiselect widget starts as empty.\\\\\n\\\\\n`choices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\\\\\n`](/develop/api-reference/widgets/st.multiselect) [![screenshot](/images/api/pills.jpg)**Pills** \\\\\nDisplay a pill-button selection widget.\\\\\n\\\\\n`st.pills(\"Tags\", [\"Sports\", \"AI\", \"Politics\"])\\\\\n`](/develop/api-reference/widgets/st.pills) [![screenshot](/images/api/radio.jpg)**Radio** \\\\\nDisplay a radio button widget.\\\\\n\\\\\n`choice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\\\\\n`](/develop/api-reference/widgets/st.radio) [![screenshot](/images/api/segmented_control.jpg)**Segmented control** \\\\\nDisplay a segmented-button selection widget.\\\\\n\\\\\n`st.segmented_control(\"Filter\", [\"Open\", \"Closed\", \"All\"])\\\\\n`](/develop/api-reference/widgets/st.segmented_control) [![screenshot](/images/api/select_slider.jpg)**Select slider** \\\\\nDisplay a slider widget to select items from a list.\\\\\n\\\\\n`size = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\\\\\n`](/develop/api-reference/widgets/st.select_slider) [![screenshot](/images/api/selectbox.jpg)**Selectbox** \\\\\nDisplay a select widget.\\\\\n\\\\\n`choice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\\\\\n`](/develop/api-reference/widgets/st.selectbox) [![screenshot](/images/api/toggle.jpg)**Toggle** \\\\\nDisplay a toggle widget.\\\\\n\\\\\n`activated = st.toggle(\"Activate\")\\\\\n`](/develop/api-reference/widgets/st.toggle)\n\n## Numeric input elements\n\n[![screenshot](/images/api/number_input.jpg)**Number input** \\\\\nDisplay a numeric input widget.\\\\\n\\\\\n`choice = st.number_input(\"Pick a number\", 0, 10)\\\\\n`](/develop/api-reference/widgets/st.number_input) [![screenshot](/images/api/slider.jpg)**Slider** \\\\\nDisplay a slider widget.\\\\\n\\\\\n`number = st.slider(\"Pick a number\", 0, 100)\\\\\n`](/develop/api-reference/widgets/st.slider)\n\n## Date and time input elements\n\n[![screenshot](/images/api/date_input.jpg)**Date input** \\\\\nDisplay a date input widget.\\\\\n\\\\\n`date = st.date_input(\"Your birthday\")\\\\\n`](/develop/api-reference/widgets/st.date_input) [![screenshot](/images/api/time_input.jpg)**Time input** \\\\\nDisplay a time input widget.\\\\\n\\\\\n`time = st.time_input(\"Meeting time\")\\\\\n`](/develop/api-reference/widgets/st.time_input)\n\n## Text input elements\n\n[![screenshot](/images/api/text_input.jpg)**Text input** \\\\\nDisplay a single-line text input widget.\\\\\n\\\\\n`name = st.text_input(\"First name\")\\\\\n`](/develop/api-reference/widgets/st.text_input) [![screenshot](/images/api/text_area.jpg)**Text area** \\\\\nDisplay a multi-line text input widget.\\\\\n\\\\\n`text = st.text_area(\"Text to translate\")\\\\\n`](/develop/api-reference/widgets/st.text_area) [![screenshot](/images/api/chat_input.jpg)**Chat input** \\\\\nDisplay a chat input widget.\\\\\n\\\\\n`prompt = st.chat_input(\"Say something\")\\\\\nif prompt:\\\\\n    st.write(f\"The user has sent: {prompt}\")\\\\\n`](/develop/api-reference/chat/st.chat_input)\n\n## Other input elements\n\n[![screenshot](/images/api/audio_input.jpg)**Audio input** \\\\\nDisplay a widget that allows users to record with their microphone.\\\\\n\\\\\n`speech = st.audio_input(\"Record a voice message\")\\\\\n`](/develop/api-reference/widgets/st.audio_input) [![screenshot](/images/api/data_editor.jpg)**Data editor** \\\\\nDisplay a data editor widget.\\\\\n\\\\\n`edited = st.data_editor(df, num_rows=\"dynamic\")\\\\\n`](/develop/api-reference/data/st.data_editor) [![screenshot](/images/api/file_uploader.jpg)**File uploader** \\\\\nDisplay a file uploader widget.\\\\\n\\\\\n`data = st.file_uploader(\"Upload a CSV\")\\\\\n`](/develop/api-reference/widgets/st.file_uploader) [![screenshot](/images/api/camera_input.jpg)**Camera input** \\\\\nDisplay a widget that allows users to upload images directly from a camera.\\\\\n\\\\\n`image = st.camera_input(\"Take a picture\")\\\\\n`](/develop/api-reference/widgets/st.camera_input)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/chat.jpg)**Streamlit Chat**](https://github.com/AI-Yash/st-chat)\n\n[Streamlit Component for a Chatbot UI. Created by](https://github.com/AI-Yash/st-chat) [@AI-Yash](https://github.com/AI-Yash).\n\n`from streamlit_chat import message\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n`\n\n[![screenshot](/images/api/components/option-menu.jpg)**Streamlit Option Menu**](https://github.com/victoryhb/streamlit-option-menu)\n\n[Select a single item from a list of options in a menu. Created by](https://github.com/victoryhb/streamlit-option-menu) [@victoryhb](https://github.com/victoryhb).\n\n`from streamlit_option_menu import option_menu\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\nicons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n`\n\n[![screenshot](/images/api/components/extras-toggle.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\", \"\"\"ü•∑ Surprise! Here's some additional content\"\"\",)\n`\n\n[![screenshot](/images/api/components/elements.jpg)**Streamlit Elements**](https://github.com/okld/streamlit-elements)\n\n[Create a draggable and resizable dashboard in Streamlit. Created by](https://github.com/okld/streamlit-elements) [@okls](https://github.com/okls).\n\n`from streamlit_elements import elements, mui, html\nwith elements(\"new_element\"):\nmui.Typography(\"Hello world\")\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`from streamlit_tags import st_tags\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/stqdm.jpg)**Stqdm**](https://github.com/Wirg/stqdm)\n\n[The simplest way to handle a progress bar in streamlit app. Created by](https://github.com/Wirg/stqdm) [@Wirg](https://github.com/Wirg).\n\n`from stqdm import stqdm\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n`\n\n[![screenshot](/images/api/components/timeline.jpg)**Timeline**](https://github.com/innerdoc/streamlit-timeline)\n\n[Display a Timeline in Streamlit apps using](https://github.com/innerdoc/streamlit-timeline) [TimelineJS](https://timeline.knightlab.com/). Created by [@innerdoc](https://github.com/innerdoc).\n\n`from streamlit_timeline import timeline\nwith open('example.json', \"r\") as f:\ntimeline(f.read(), height=800)\n`\n\n[![screenshot](/images/api/components/camera-live.jpg)**Camera input live**](https://github.com/blackary/streamlit-camera-input-live)\n\n[Alternative for st.camera\\_input which returns the webcam images live. Created by](https://github.com/blackary/streamlit-camera-input-live) [@blackary](https://github.com/blackary).\n\n`from camera_input_live import camera_input_live\nimage = camera_input_live()\nst.image(value)\n`\n\n[![screenshot](/images/api/components/ace.jpg)**Streamlit Ace**](https://github.com/okld/streamlit-ace)\n\n[Ace editor component for Streamlit. Created by](https://github.com/okld/streamlit-ace) [@okld](https://github.com/okld).\n\n`from streamlit_ace import st_ace\ncontent = st_ace()\ncontent\n`\n\n[![screenshot](/images/api/components/chat.jpg)**Streamlit Chat**](https://github.com/AI-Yash/st-chat)\n\n[Streamlit Component for a Chatbot UI. Created by](https://github.com/AI-Yash/st-chat) [@AI-Yash](https://github.com/AI-Yash).\n\n`from streamlit_chat import message\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n`\n\n[![screenshot](/images/api/components/option-menu.jpg)**Streamlit Option Menu**](https://github.com/victoryhb/streamlit-option-menu)\n\n[Select a single item from a list of options in a menu. Created by](https://github.com/victoryhb/streamlit-option-menu) [@victoryhb](https://github.com/victoryhb).\n\n`from streamlit_option_menu import option_menu\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\nicons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n`\n\n[![screenshot](/images/api/components/extras-toggle.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\", \"\"\"ü•∑ Surprise! Here's some additional content\"\"\",)\n`\n\n[![screenshot](/images/api/components/elements.jpg)**Streamlit Elements**](https://github.com/okld/streamlit-elements)\n\n[Create a draggable and resizable dashboard in Streamlit. Created by](https://github.com/okld/streamlit-elements) [@okls](https://github.com/okls).\n\n`from streamlit_elements import elements, mui, html\nwith elements(\"new_element\"):\nmui.Typography(\"Hello world\")\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`from streamlit_tags import st_tags\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/stqdm.jpg)**Stqdm**](https://github.com/Wirg/stqdm)\n\n[The simplest way to handle a progress bar in streamlit app. Created by](https://github.com/Wirg/stqdm) [@Wirg](https://github.com/Wirg).\n\n`from stqdm import stqdm\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n`\n\n[![screenshot](/images/api/components/timeline.jpg)**Timeline**](https://github.com/innerdoc/streamlit-timeline)\n\n[Display a Timeline in Streamlit apps using](https://github.com/innerdoc/streamlit-timeline) [TimelineJS](https://timeline.knightlab.com/). Created by [@innerdoc](https://github.com/innerdoc).\n\n`from streamlit_timeline import timeline\nwith open('example.json', \"r\") as f:\ntimeline(f.read(), height=800)\n`\n\n[![screenshot](/images/api/components/camera-live.jpg)**Camera input live**](https://github.com/blackary/streamlit-camera-input-live)\n\n[Alternative for st.camera\\_input which returns the webcam images live. Created by](https://github.com/blackary/streamlit-camera-input-live) [@blackary](https://github.com/blackary).\n\n`from camera_input_live import camera_input_live\nimage = camera_input_live()\nst.image(value)\n`\n\n[![screenshot](/images/api/components/ace.jpg)**Streamlit Ace**](https://github.com/okld/streamlit-ace)\n\n[Ace editor component for Streamlit. Created by](https://github.com/okld/streamlit-ace) [@okld](https://github.com/okld).\n\n`from streamlit_ace import st_ace\ncontent = st_ace()\ncontent\n`\n\n[![screenshot](/images/api/components/chat.jpg)**Streamlit Chat**](https://github.com/AI-Yash/st-chat)\n\n[Streamlit Component for a Chatbot UI. Created by](https://github.com/AI-Yash/st-chat) [@AI-Yash](https://github.com/AI-Yash).\n\n`from streamlit_chat import message\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n`\n\n[![screenshot](/images/api/components/option-menu.jpg)**Streamlit Option Menu**](https://github.com/victoryhb/streamlit-option-menu)\n\n[Select a single item from a list of options in a menu. Created by](https://github.com/victoryhb/streamlit-option-menu) [@victoryhb](https://github.com/victoryhb).\n\n`from streamlit_option_menu import option_menu\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\nicons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n`\n\n[![screenshot](/images/api/components/extras-toggle.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\", \"\"\"ü•∑ Surprise! Here's some additional content\"\"\",)\n`\n\nNext\n\n[Previous: Chart elements](/develop/api-reference/charts) [Next: st.button](/develop/api-reference/widgets/st.button)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/widgets",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Input widgets - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Input widgets - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Input widgets - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/widgets",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Input widgets - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Headings and body text](#headings-and-body-text)\n3. [Formatted text](#formatted-text)\n\n# Text elements\n\nStreamlit apps usually start with a call to `st.title` to set the\napp's title. After that, there are 2 heading levels you can use:\n`st.header` and `st.subheader`.\n\nPure text is entered with `st.text`, and Markdown with\n`st.markdown`.\n\nWe also offer a \"swiss-army knife\" command called `st.write`, which accepts\nmultiple arguments, and multiple data types. And as described above, you can\nalso use [magic commands](/develop/api-reference/write-magic/magic) in place of `st.write`.\n\n## Headings and body text\n\n[![screenshot](/images/api/markdown.jpg)**Markdown** \\\\\nDisplay string formatted as Markdown.\\\\\n\\\\\n`st.markdown(\"Hello **world**!\")\\\\\n`](/develop/api-reference/text/st.markdown) [![screenshot](/images/api/title.jpg)**Title** \\\\\nDisplay text in title formatting.\\\\\n\\\\\n`st.title(\"The app title\")\\\\\n`](/develop/api-reference/text/st.title) [![screenshot](/images/api/header.jpg)**Header** \\\\\nDisplay text in header formatting.\\\\\n\\\\\n`st.header(\"This is a header\")\\\\\n`](/develop/api-reference/text/st.header) [![screenshot](/images/api/subheader.jpg)**Subheader** \\\\\nDisplay text in subheader formatting.\\\\\n\\\\\n`st.subheader(\"This is a subheader\")\\\\\n`](/develop/api-reference/text/st.subheader)\n\n## Formatted text\n\n[![screenshot](/images/api/caption.jpg)**Caption** \\\\\nDisplay text in small font.\\\\\n\\\\\n`st.caption(\"This is written small caption text\")\\\\\n`](/develop/api-reference/text/st.caption) [![screenshot](/images/api/code.jpg)**Code block** \\\\\nDisplay a code block with optional syntax highlighting.\\\\\n\\\\\n`st.code(\"a = 1234\")\\\\\n`](/develop/api-reference/text/st.code) [![screenshot](/images/api/code.jpg)**Echo** \\\\\nDisplay some code on the app, then execute it. Useful for tutorials.\\\\\n\\\\\n`with st.echo():\\\\\nst.write('This code will be printed')\\\\\n`](/develop/api-reference/text/st.echo) [![screenshot](/images/api/text.jpg)**Preformatted text** \\\\\nWrite fixed-width and preformatted text.\\\\\n\\\\\n`st.text(\"Hello world\")\\\\\n`](/develop/api-reference/text/st.text) [![screenshot](/images/api/latex.jpg)**LaTeX** \\\\\nDisplay mathematical expressions formatted as LaTeX.\\\\\n\\\\\n`st.latex(\"\\int a x^2 \\,dx\")\\\\\n`](/develop/api-reference/text/st.latex) [![screenshot](/images/api/divider.jpg)**Divider** \\\\\nDisplay a horizontal rule.\\\\\n\\\\\n`st.divider()\\\\\n`](/develop/api-reference/text/st.divider)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`st_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/nlu.jpg)**NLU**](https://github.com/JohnSnowLabs/nlu)\n\n[Apply text mining on a dataframe. Created by](https://github.com/JohnSnowLabs/nlu) [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n`nlu.load('sentiment').predict('I love NLU! <3')\n`\n\n[![screenshot](/images/api/components/extras-mentions.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`mention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n`\n\n[![screenshot](/images/api/components/annotated-text.jpg)**Annotated text**](https://github.com/tvst/st-annotated-text)\n\n[Display annotated text in Streamlit apps. Created by](https://github.com/tvst/st-annotated-text) [@tvst](https://github.com/tvst).\n\n`annotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`st_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`st_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/nlu.jpg)**NLU**](https://github.com/JohnSnowLabs/nlu)\n\n[Apply text mining on a dataframe. Created by](https://github.com/JohnSnowLabs/nlu) [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n`nlu.load('sentiment').predict('I love NLU! <3')\n`\n\n[![screenshot](/images/api/components/extras-mentions.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`mention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n`\n\n[![screenshot](/images/api/components/annotated-text.jpg)**Annotated text**](https://github.com/tvst/st-annotated-text)\n\n[Display annotated text in Streamlit apps. Created by](https://github.com/tvst/st-annotated-text) [@tvst](https://github.com/tvst).\n\n`annotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`st_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`st_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/nlu.jpg)**NLU**](https://github.com/JohnSnowLabs/nlu)\n\n[Apply text mining on a dataframe. Created by](https://github.com/JohnSnowLabs/nlu) [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n`nlu.load('sentiment').predict('I love NLU! <3')\n`\n\n[![screenshot](/images/api/components/extras-mentions.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`mention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n`\n\nNext\n\n[Previous: Write and magic](/develop/api-reference/write-magic) [Next: st.title](/develop/api-reference/text/st.title)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/text",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Text elements - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Text elements - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Text elements - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/text",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Text elements - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Setup your connection](#setup-your-connection)\n3. [Built-in connections](#built-in-connections)\n4. [Third-party connections](#third-party-connections)\n5. [Secrets](#secrets)\n6. [Deprecated classes](#deprecated-classes)\n\n# Connections and databases\n\n## Setup your connection\n\n[![screenshot](/images/api/connection.svg)**Create a connection** \\\\\nConnect to a data source or API\\\\\n\\\\\n`conn = st.connection('pets_db', type='sql')\\\\\npet_owners = conn.query('select * from pet_owners')\\\\\nst.dataframe(pet_owners)\\\\\n`](/develop/api-reference/connections/st.connection)\n\n## Built-in connections\n\n[![screenshot](/images/api/connections.SnowflakeConnection.svg)**SnowflakeConnection** \\\\\nA connection to Snowflake.\\\\\n\\\\\n`conn = st.connection('snowflake')\\\\\n`](/develop/api-reference/connections/st.connections.snowflakeconnection) [![screenshot](/images/api/connections.SQLConnection.svg)**SQLConnection** \\\\\nA connection to a SQL database using SQLAlchemy.\\\\\n\\\\\n`conn = st.connection('sql')\\\\\n`](/develop/api-reference/connections/st.connections.sqlconnection)\n\n## Third-party connections\n\n[**Connection base class** \\\\\nBuild your own connection with `BaseConnection`.\\\\\n\\\\\n`class MyConnection(BaseConnection[myconn.MyConnection]):\\\\\n    def _connect(self, **kwargs) -> MyConnection:\\\\\n        return myconn.connect(**self._secrets, **kwargs)\\\\\n    def query(self, query):\\\\\n        return self._instance.query(query)\\\\\n`](/develop/api-reference/connections/st.connections.baseconnection)\n\n## Secrets\n\n[**Secrets singleton** \\\\\nAccess secrets from a local TOML file.\\\\\n\\\\\n`key = st.secrets[\"OpenAI_key\"]\\\\\n`](/develop/api-reference/connections/st.secrets) [**Secrets file** \\\\\nSave your secrets in a per-project or per-profile TOML file.\\\\\n\\\\\n`OpenAI_key = \"<YOUR_SECRET_KEY>\"\\\\\n`](/develop/api-reference/connections/secrets.toml)\n\n## Deprecated classes\n\n[_delete_\\\\\n**SnowparkConnection** \\\\\nA connection to Snowflake.\\\\\n\\\\\n`conn = st.connection(\"snowpark\")\\\\\n`](/develop/api-reference/connections/st.connections.snowparkconnection)[Previous: Caching and state](/develop/api-reference/caching-and-state) [Next: st.secrets](/develop/api-reference/connections/st.secrets)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/connections",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Connections and databases - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Connections and databases - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Connections and databases - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/connections",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Connections and databases - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Custom components\n\n[**Declare a component** \\\\\nCreate and register a custom component.\\\\\n\\\\\n`from st.components.v1 import declare_component\\\\\ndeclare_component(\\\\\n    \"custom_slider\",\\\\\n    \"/frontend\",\\\\\n)\\\\\n`](/develop/api-reference/custom-components/st.components.v1.declare_component) [**HTML** \\\\\nDisplay an HTML string in an iframe.\\\\\n\\\\\n`from st.components.v1 import html\\\\\nhtml(\\\\\n    \"<p>Foo bar.</p>\"\\\\\n)\\\\\n`](/develop/api-reference/custom-components/st.components.v1.html) [**iframe** \\\\\nLoad a remote URL in an iframe.\\\\\n\\\\\n`from st.components.v1 import iframe\\\\\niframe(\\\\\n    \"docs.streamlit.io\"\\\\\n)\\\\\n`](/develop/api-reference/custom-components/st.components.v1.iframe)[Previous: Connections and secrets](/develop/api-reference/connections) [Next: st.components.v1‚Äã.declare\\_component](/develop/api-reference/custom-components/st.components.v1.declare_component)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/custom-components",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Custom components - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Custom components - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Custom components - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/custom-components",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Custom components - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Navigation and pages\n\n[![screenshot](/images/api/navigation.jpg)**Navigation** \\\\\nConfigure the available pages in a multipage app.\\\\\n\\\\\n`st.navigation({\\\\\n    \"Your account\" : [log_out, settings],\\\\\n    \"Reports\" : [overview, usage],\\\\\n    \"Tools\" : [search]\\\\\n})\\\\\n`](/develop/api-reference/navigation/st.navigation) [![screenshot](/images/api/page.jpg)**Page** \\\\\nDefine a page in a multipage app.\\\\\n\\\\\n`home = st.Page(\\\\\n    \"home.py\",\\\\\n    title=\"Home\",\\\\\n    icon=\":material/home:\"\\\\\n)\\\\\n`](/develop/api-reference/navigation/st.page) [![screenshot](/images/api/page_link.jpg)**Page link** \\\\\nDisplay a link to another page in a multipage app.\\\\\n\\\\\n`st.page_link(\"app.py\", label=\"Home\", icon=\"üè†\")\\\\\nst.page_link(\"pages/profile.py\", label=\"Profile\")\\\\\n`](/develop/api-reference/widgets/st.page_link) [**Switch page** \\\\\nProgrammatically navigates to a specified page.\\\\\n\\\\\n`st.switch_page(\"pages/my_page.py\")\\\\\n`](/develop/api-reference/navigation/st.switch_page)[Previous: Third-party components](https://streamlit.io/components) [Next: st.navigation](/develop/api-reference/navigation/st.navigation)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/navigation",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Navigation and pages - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Navigation and pages - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Navigation and pages - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/navigation",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Navigation and pages - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Change execution](#change-execution)\n3. [Group multiple widgets](#group-multiple-widgets)\n\n# Execution flow\n\n## Change execution\n\nBy default, Streamlit apps execute the script entirely, but we allow some functionality to handle control flow in your applications.\n\n[![screenshot](/images/api/dialog.jpg)**Modal dialog** \\\\\nInsert a modal dialog that can rerun independently from the rest of the script.\\\\\n\\\\\n`@st.dialog(\"Sign up\")\\\\\ndef email_form():\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n`](/develop/api-reference/execution-flow/st.dialog) [**Fragments** \\\\\nDefine a fragment to rerun independently from the rest of the script.\\\\\n\\\\\n`@st.fragment(run_every=\"10s\")\\\\\ndef fragment():\\\\\n    df = get_data()\\\\\n    st.line_chart(df)\\\\\n`](/develop/api-reference/execution-flow/st.fragment) [**Rerun script** \\\\\nRerun the script immediately.\\\\\n\\\\\n`st.rerun()\\\\\n`](/develop/api-reference/execution-flow/st.rerun) [**Stop execution** \\\\\nStops execution immediately.\\\\\n\\\\\n`st.stop()\\\\\n`](/develop/api-reference/execution-flow/st.stop)\n\n## Group multiple widgets\n\nBy default, Streamlit reruns your script everytime a user interacts with your app.\nHowever, sometimes it's a better user experience to wait until a group of related\nwidgets is filled before actually rerunning the script. That's what `st.form` is for!\n\n[**Forms** \\\\\nCreate a form that batches elements together with a ‚ÄúSubmit\" button.\\\\\n\\\\\n`with st.form(key='my_form'):\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n    st.form_submit_button(\"Sign up\")\\\\\n`](/develop/api-reference/execution-flow/st.form) [**Form submit button** \\\\\nDisplay a form submit button.\\\\\n\\\\\n`with st.form(key='my_form'):\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n    st.form_submit_button(\"Sign up\")\\\\\n`](/develop/api-reference/execution-flow/st.form_submit_button)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/autorefresh.jpg)**Autorefresh**](https://github.com/kmcgrady/streamlit-autorefresh)\n\n[Force a refresh without tying up a script. Created by](https://github.com/kmcgrady/streamlit-autorefresh) [@kmcgrady](https://github.com/kmcgrady).\n\n`from streamlit_autorefresh import st_autorefresh\nst_autorefresh(interval=2000, limit=100,\nkey=\"fizzbuzzcounter\")\n`\n\n[![screenshot](/images/api/components/pydantic.jpg)**Pydantic**](https://github.com/lukasmasuch/streamlit-pydantic)\n\n[Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by](https://github.com/lukasmasuch/streamlit-pydantic) [@lukasmasuch](https://github.com/lukasmasuch).\n\n`import streamlit_pydantic as sp\nsp.pydantic_form(key=\"my_form\",\nmodel=ExampleModel)\n`\n\n[![screenshot](/images/api/components/pages.jpg)**Streamlit Pages**](https://github.com/blackary/st_pages)\n\n[An experimental version of Streamlit Multi-Page Apps. Created by](https://github.com/blackary/st_pages) [@blackary](https://github.com/blackary).\n\n`from st_pages import Page, show_pages, add_page_title\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"üè†\"),\\\nPage(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n`\n\n[Previous: Navigation and pages](/develop/api-reference/navigation) [Next: st.dialog](/develop/api-reference/execution-flow/st.dialog)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/execution-flow",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Execution flow - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Execution flow - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Execution flow - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/execution-flow",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Execution flow - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Media elements\n\nIt's easy to embed images, videos, and audio files directly into your Streamlit apps.\n\n[![screenshot](/images/api/image.jpg)**Image** \\\\\nDisplay an image or list of images.\\\\\n\\\\\n`st.image(numpy_array)\\\\\nst.image(image_bytes)\\\\\nst.image(file)\\\\\nst.image(\"https://example.com/myimage.jpg\")\\\\\n`](/develop/api-reference/media/st.image) [![screenshot](/images/api/logo.jpg)**Logo** \\\\\nDisplay a logo in the upper-left corner of your app and its sidebar.\\\\\n\\\\\n`st.logo(\"logo.jpg\")\\\\\n`](/develop/api-reference/media/st.logo) [![screenshot](/images/api/audio.jpg)**Audio** \\\\\nDisplay an audio player.\\\\\n\\\\\n`st.audio(numpy_array)\\\\\nst.audio(audio_bytes)\\\\\nst.audio(file)\\\\\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\\\\\n`](/develop/api-reference/media/st.audio) [![screenshot](/images/api/video.jpg)**Video** \\\\\nDisplay a video player.\\\\\n\\\\\n`st.video(numpy_array)\\\\\nst.video(video_bytes)\\\\\nst.video(file)\\\\\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\\\\\n`](/develop/api-reference/media/st.video)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/cropper.jpg)**Streamlit Cropper**](https://github.com/turner-anderson/streamlit-cropper)\n\n[A simple image cropper for Streamlit. Created by](https://github.com/turner-anderson/streamlit-cropper) [@turner-anderson](https://github.com/turner-anderson).\n\n`from streamlit_cropper import st_cropper\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/webrtc.jpg)**Streamlit Webrtc**](https://github.com/whitphx/streamlit-webrtc)\n\n[Handling and transmitting real-time video/audio streams with Streamlit. Created by](https://github.com/whitphx/streamlit-webrtc) [@whitphx](https://github.com/whitphx).\n\n`from streamlit_webrtc import webrtc_streamer\nwebrtc_streamer(key=\"sample\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_drawable_canvas import st_canvas\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/image-comparison.jpg)**Image Comparison**](https://github.com/fcakyon/streamlit-image-comparison)\n\n[Compare images with a slider using](https://github.com/fcakyon/streamlit-image-comparison) [JuxtaposeJS](https://juxtapose.knightlab.com/). Created by [@fcakyon](https://github.com/fcakyon).\n\n`from streamlit_image_comparison import image_comparison\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n`\n\n[![screenshot](/images/api/components/cropper.jpg)**Streamlit Cropper**](https://github.com/turner-anderson/streamlit-cropper)\n\n[A simple image cropper for Streamlit. Created by](https://github.com/turner-anderson/streamlit-cropper) [@turner-anderson](https://github.com/turner-anderson).\n\n`from streamlit_cropper import st_cropper\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/webrtc.jpg)**Streamlit Webrtc**](https://github.com/whitphx/streamlit-webrtc)\n\n[Handling and transmitting real-time video/audio streams with Streamlit. Created by](https://github.com/whitphx/streamlit-webrtc) [@whitphx](https://github.com/whitphx).\n\n`from streamlit_webrtc import webrtc_streamer\nwebrtc_streamer(key=\"sample\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_drawable_canvas import st_canvas\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/image-comparison.jpg)**Image Comparison**](https://github.com/fcakyon/streamlit-image-comparison)\n\n[Compare images with a slider using](https://github.com/fcakyon/streamlit-image-comparison) [JuxtaposeJS](https://juxtapose.knightlab.com/). Created by [@fcakyon](https://github.com/fcakyon).\n\n`from streamlit_image_comparison import image_comparison\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n`\n\n[![screenshot](/images/api/components/cropper.jpg)**Streamlit Cropper**](https://github.com/turner-anderson/streamlit-cropper)\n\n[A simple image cropper for Streamlit. Created by](https://github.com/turner-anderson/streamlit-cropper) [@turner-anderson](https://github.com/turner-anderson).\n\n`from streamlit_cropper import st_cropper\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\nNext\n\n[Previous: Input widgets](/develop/api-reference/widgets) [Next: st.audio](/develop/api-reference/media/st.audio)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/media",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Media elements - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Media elements - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Media elements - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/media",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Media elements - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n# Data elements\n\nWhen you're working with data, it is extremely valuable to visualize that\ndata quickly, interactively, and from multiple different angles. That's what\nStreamlit is actually built and optimized for.\n\nYou can display data via [charts](#display-charts), and you can display it in\nraw form. These are the Streamlit commands you can use to display and interact with raw data.\n\n[![screenshot](/images/api/dataframe.jpg)**Dataframes** \\\\\nDisplay a dataframe as an interactive table.\\\\\n\\\\\n`st.dataframe(my_data_frame)\\\\\n`](/develop/api-reference/data/st.dataframe) [![screenshot](/images/api/data_editor.jpg)**Data editor** \\\\\nDisplay a data editor widget.\\\\\n\\\\\n`edited = st.data_editor(df, num_rows=\"dynamic\")\\\\\n`](/develop/api-reference/data/st.data_editor) [![screenshot](/images/api/column_config.jpg)**Column configuration** \\\\\nConfigure the display and editing behavior of dataframes and data editors.\\\\\n\\\\\n`st.column_config.NumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\\\\\n`](/develop/api-reference/data/st.column_config) [![screenshot](/images/api/table.jpg)**Static tables** \\\\\nDisplay a static table.\\\\\n\\\\\n`st.table(my_data_frame)\\\\\n`](/develop/api-reference/data/st.table) [![screenshot](/images/api/metric.jpg)**Metrics** \\\\\nDisplay a metric in big bold font, with an optional indicator of how the metric changed.\\\\\n\\\\\n`st.metric(\"My metric\", 42, 2)\\\\\n`](/develop/api-reference/data/st.metric) [![screenshot](/images/api/json.jpg)**Dicts and JSON** \\\\\nDisplay object or string as a pretty-printed JSON string.\\\\\n\\\\\n`st.json(my_dict)\\\\\n`](/develop/api-reference/data/st.json)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\nst.write(value)\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`from streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-metric-cards.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\nstyle_metric_cards()\n`\n\n[![screenshot](/images/api/components/aggrid.jpg)**Streamlit Aggrid**](https://github.com/PablocFonseca/streamlit-aggrid)\n\n[Implementation of Ag-Grid component for Streamlit. Created by](https://github.com/PablocFonseca/streamlit-aggrid) [@PablocFonseca](https://github.com/PablocFonseca).\n\n`df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\nnew_df = grid_return['data']\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/pandas-profiling.jpg)**Pandas Profiling**](https://github.com/okld/streamlit-pandas-profiling)\n\n[Pandas profiling component for Streamlit. Created by](https://github.com/okld/streamlit-pandas-profiling) [@okld](https://github.com/okld/).\n\n`df = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\nst_profile_report(pr)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\nst.write(value)\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`from streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-metric-cards.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\nstyle_metric_cards()\n`\n\n[![screenshot](/images/api/components/aggrid.jpg)**Streamlit Aggrid**](https://github.com/PablocFonseca/streamlit-aggrid)\n\n[Implementation of Ag-Grid component for Streamlit. Created by](https://github.com/PablocFonseca/streamlit-aggrid) [@PablocFonseca](https://github.com/PablocFonseca).\n\n`df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\nnew_df = grid_return['data']\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/pandas-profiling.jpg)**Pandas Profiling**](https://github.com/okld/streamlit-pandas-profiling)\n\n[Pandas profiling component for Streamlit. Created by](https://github.com/okld/streamlit-pandas-profiling) [@okld](https://github.com/okld/).\n\n`df = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\nst_profile_report(pr)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\nst.write(value)\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`from streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-metric-cards.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\nstyle_metric_cards()\n`\n\nNext\n\n[Previous: Text elements](/develop/api-reference/text) [Next: st.dataframe](/develop/api-reference/data/st.dataframe)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/data",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Data elements - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Data elements - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Data elements - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/data",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Data elements - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n1. Contents\n2. [Animated status elements](#animated-status-elements)\n3. [Simple callout messages](#simple-callout-messages)\n\n# Display progress and status\n\nStreamlit provides a few methods that allow you to add animation to your\napps. These animations include progress bars, status messages (like\nwarnings), and celebratory balloons.\n\n## Animated status elements\n\n[![screenshot](/images/api/progress.jpg)**Progress bar** \\\\\nDisplay a progress bar.\\\\\n\\\\\n`for i in range(101):\\\\\nst.progress(i)\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.progress) [![screenshot](/images/api/spinner.jpg)**Spinner** \\\\\nTemporarily displays a message while executing a block of code.\\\\\n\\\\\n`with st.spinner(\"Please wait...\"):\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.spinner) [![screenshot](/images/api/status.jpg)**Status container** \\\\\nDisplay output of long-running tasks in a container.\\\\\n\\\\\n`with st.status('Running'):\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.status) [![screenshot](/images/api/toast.jpg)**Toast** \\\\\nBriefly displays a toast message in the bottom-right corner.\\\\\n\\\\\n`st.toast('Butter!', icon='üßà')\\\\\n`](/develop/api-reference/status/st.toast) [![screenshot](/images/api/balloons.jpg)**Balloons** \\\\\nDisplay celebratory balloons!\\\\\n\\\\\n`st.balloons()\\\\\n`](/develop/api-reference/status/st.balloons) [![screenshot](/images/api/snow.jpg)**Snowflakes** \\\\\nDisplay celebratory snowflakes!\\\\\n\\\\\n`st.snow()\\\\\n`](/develop/api-reference/status/st.snow)\n\n## Simple callout messages\n\n[![screenshot](/images/api/success.jpg)**Success box** \\\\\nDisplay a success message.\\\\\n\\\\\n`st.success(\"Match found!\")\\\\\n`](/develop/api-reference/status/st.success) [![screenshot](/images/api/info.jpg)**Info box** \\\\\nDisplay an informational message.\\\\\n\\\\\n`st.info(\"Dataset is updated every day at midnight.\")\\\\\n`](/develop/api-reference/status/st.info) [![screenshot](/images/api/warning.jpg)**Warning box** \\\\\nDisplay warning message.\\\\\n\\\\\n`st.warning(\"Unable to fetch image. Skipping...\")\\\\\n`](/develop/api-reference/status/st.warning) [![screenshot](/images/api/error.jpg)**Error box** \\\\\nDisplay error message.\\\\\n\\\\\n`st.error(\"We encountered an error\")\\\\\n`](/develop/api-reference/status/st.error) [![screenshot](/images/api/exception.jpg)**Exception output** \\\\\nDisplay an exception.\\\\\n\\\\\n`e = RuntimeError(\"This is an exception of type RuntimeError\")\\\\\nst.exception(e)\\\\\n`](/develop/api-reference/status/st.exception)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/stqdm.jpg)**Stqdm**](https://github.com/Wirg/stqdm)\n\n[The simplest way to handle a progress bar in streamlit app. Created by](https://github.com/Wirg/stqdm) [@Wirg](https://github.com/Wirg).\n\n`from stqdm import stqdm\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n`\n\n[![screenshot](/images/api/components/custom-notification-box.jpg)**Custom notification box**](https://github.com/Socvest/streamlit-custom-notification-box)\n\n[A custom notification box with the ability to close it out. Created by](https://github.com/Socvest/streamlit-custom-notification-box) [@Socvest](https://github.com/Socvest).\n\n`from streamlit_custom_notification_box import custom_notification_box\nstyles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}\ncustom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key=\"foo\")\n`\n\n[![screenshot](/images/api/components/extras-emojis.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.let_it_rain import rain\nrain(emoji=\"üéà\", font_size=54,\nfalling_speed=5, animation_length=\"infinite\",)\n`\n\n[Previous: Chat elements](/develop/api-reference/chat) [Next: st.success](/develop/api-reference/status/st.success)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference/status",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "Display progress and status - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "Display progress and status - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "Display progress and status - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference/status",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "Display progress and status - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  },
  {
    "markdown": "# Hello there üëã\n\nThanks for stopping by! We use cookies to help us understand how you interact with our website.\n\nBy clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).\n\nCookie settingsReject allAccept all\n\n01. Contents\n02. [Display almost anything](#display-almost-anything)\n03. [Write and magic](#write-and-magic)\n04. [Text elements](#text-elements)\n05. [Data elements](#data-elements)\n06. [Chart elements](#chart-elements)\n07. [Input widgets](#input-widgets)\n08. [Media elements](#media-elements)\n09. [Layouts and containers](#layouts-and-containers)\n10. [Chat elements](#chat-elements)\n11. [Status elements](#status-elements)\n12. [App logic and configuration](#app-logic-and-configuration)\n13. [Navigation and pages](#navigation-and-pages)\n14. [Execution flow](#execution-flow)\n15. [Caching and state](#caching-and-state)\n16. [Connections and databases](#connections-and-databases)\n17. [Setup your connection](#setup-your-connection)\n18. [Built-in connections](#built-in-connections)\n19. [Build your own connections](#build-your-own-connections)\n20. [Secrets management](#secrets-management)\n21. [Custom Components](#custom-components)\n22. [Utilities and user info](#utilities-and-user-info)\n23. [Configuration](#configuration)\n24. [Developer tools](#developer-tools)\n25. [App testing](#app-testing)\n\n# API reference\n\nStreamlit makes it easy for you to visualize, mutate, and share data. The API\nreference is organized by activity type, like displaying data or optimizing\nperformance. Each section includes methods associated with the activity type,\nincluding examples.\n\nBrowse our API below and click to learn more about any of our available commands! üéà\n\n## Display almost anything\n\n### Write and magic\n\n[**st.write** \\\\\nWrite arguments to the app.\\\\\n\\\\\n`st.write(\"Hello **world**!\")\\\\\nst.write(my_data_frame)\\\\\nst.write(my_mpl_figure)\\\\\n`](/develop/api-reference/write-magic/st.write) [**st.write\\_stream** \\\\\nWrite generators or streams to the app with a typewriter effect.\\\\\n\\\\\n`st.write_stream(my_generator)\\\\\nst.write_stream(my_llm_stream)\\\\\n`](/develop/api-reference/write-magic/st.write_stream) [**Magic** \\\\\nAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using `st.write`\\\\\n\\\\\n`\"Hello **world**!\"\\\\\nmy_data_frame\\\\\nmy_mpl_figure\\\\\n`](/develop/api-reference/write-magic/magic)\n\n### Text elements\n\n[![screenshot](/images/api/markdown.jpg)**Markdown** \\\\\nDisplay string formatted as Markdown.\\\\\n\\\\\n`st.markdown(\"Hello **world**!\")\\\\\n`](/develop/api-reference/text/st.markdown) [![screenshot](/images/api/title.jpg)**Title** \\\\\nDisplay text in title formatting.\\\\\n\\\\\n`st.title(\"The app title\")\\\\\n`](/develop/api-reference/text/st.title) [![screenshot](/images/api/header.jpg)**Header** \\\\\nDisplay text in header formatting.\\\\\n\\\\\n`st.header(\"This is a header\")\\\\\n`](/develop/api-reference/text/st.header) [![screenshot](/images/api/subheader.jpg)**Subheader** \\\\\nDisplay text in subheader formatting.\\\\\n\\\\\n`st.subheader(\"This is a subheader\")\\\\\n`](/develop/api-reference/text/st.subheader) [![screenshot](/images/api/caption.jpg)**Caption** \\\\\nDisplay text in small font.\\\\\n\\\\\n`st.caption(\"This is written small caption text\")\\\\\n`](/develop/api-reference/text/st.caption) [![screenshot](/images/api/code.jpg)**Code block** \\\\\nDisplay a code block with optional syntax highlighting.\\\\\n\\\\\n`st.code(\"a = 1234\")\\\\\n`](/develop/api-reference/text/st.code) [![screenshot](/images/api/code.jpg)**Echo** \\\\\nDisplay some code in the app, then execute it. Useful for tutorials.\\\\\n\\\\\n`with st.echo():\\\\\nst.write('This code will be printed')\\\\\n`](/develop/api-reference/text/st.echo) [![screenshot](/images/api/latex.jpg)**LaTeX** \\\\\nDisplay mathematical expressions formatted as LaTeX.\\\\\n\\\\\n`st.latex(\"\\int a x^2 \\,dx\")\\\\\n`](/develop/api-reference/text/st.latex) [![screenshot](/images/api/text.jpg)**Preformatted text** \\\\\nWrite fixed-width and preformatted text.\\\\\n\\\\\n`st.text(\"Hello world\")\\\\\n`](/develop/api-reference/text/st.text) [![screenshot](/images/api/divider.jpg)**Divider** \\\\\nDisplay a horizontal rule.\\\\\n\\\\\n`st.divider()\\\\\n`](/develop/api-reference/text/st.divider)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`st_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/nlu.jpg)**NLU**](https://github.com/JohnSnowLabs/nlu)\n\n[Apply text mining on a dataframe. Created by](https://github.com/JohnSnowLabs/nlu) [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n`nlu.load('sentiment').predict('I love NLU! <3')\n`\n\n[![screenshot](/images/api/components/extras-mentions.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`mention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n`\n\n[![screenshot](/images/api/components/annotated-text.jpg)**Annotated text**](https://github.com/tvst/st-annotated-text)\n\n[Display annotated text in Streamlit apps. Created by](https://github.com/tvst/st-annotated-text) [@tvst](https://github.com/tvst).\n\n`annotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`st_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`st_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/nlu.jpg)**NLU**](https://github.com/JohnSnowLabs/nlu)\n\n[Apply text mining on a dataframe. Created by](https://github.com/JohnSnowLabs/nlu) [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n`nlu.load('sentiment').predict('I love NLU! <3')\n`\n\n[![screenshot](/images/api/components/extras-mentions.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`mention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n`\n\n[![screenshot](/images/api/components/annotated-text.jpg)**Annotated text**](https://github.com/tvst/st-annotated-text)\n\n[Display annotated text in Streamlit apps. Created by](https://github.com/tvst/st-annotated-text) [@tvst](https://github.com/tvst).\n\n`annotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`st_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`st_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/nlu.jpg)**NLU**](https://github.com/JohnSnowLabs/nlu)\n\n[Apply text mining on a dataframe. Created by](https://github.com/JohnSnowLabs/nlu) [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n`nlu.load('sentiment').predict('I love NLU! <3')\n`\n\n[![screenshot](/images/api/components/extras-mentions.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`mention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n`\n\nNext\n\n### Data elements\n\n[![screenshot](/images/api/dataframe.jpg)**Dataframes** \\\\\nDisplay a dataframe as an interactive table.\\\\\n\\\\\n`st.dataframe(my_data_frame)\\\\\n`](/develop/api-reference/data/st.dataframe) [![screenshot](/images/api/data_editor.jpg)**Data editor** \\\\\nDisplay a data editor widget.\\\\\n\\\\\n`edited = st.data_editor(df, num_rows=\"dynamic\")\\\\\n`](/develop/api-reference/data/st.data_editor) [![screenshot](/images/api/column_config.jpg)**Column configuration** \\\\\nConfigure the display and editing behavior of dataframes and data editors.\\\\\n\\\\\n`st.column_config.NumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\\\\\n`](/develop/api-reference/data/st.column_config) [![screenshot](/images/api/table.jpg)**Static tables** \\\\\nDisplay a static table.\\\\\n\\\\\n`st.table(my_data_frame)\\\\\n`](/develop/api-reference/data/st.table) [![screenshot](/images/api/metric.jpg)**Metrics** \\\\\nDisplay a metric in big bold font, with an optional indicator of how the metric changed.\\\\\n\\\\\n`st.metric(\"My metric\", 42, 2)\\\\\n`](/develop/api-reference/data/st.metric) [![screenshot](/images/api/json.jpg)**Dicts and JSON** \\\\\nDisplay object or string as a pretty-printed JSON string.\\\\\n\\\\\n`st.json(my_dict)\\\\\n`](/develop/api-reference/data/st.json)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\nst.write(value)\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`from streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-metric-cards.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\nstyle_metric_cards()\n`\n\n[![screenshot](/images/api/components/aggrid.jpg)**Streamlit Aggrid**](https://github.com/PablocFonseca/streamlit-aggrid)\n\n[Implementation of Ag-Grid component for Streamlit. Created by](https://github.com/PablocFonseca/streamlit-aggrid) [@PablocFonseca](https://github.com/PablocFonseca).\n\n`df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\nnew_df = grid_return['data']\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/pandas-profiling.jpg)**Pandas Profiling**](https://github.com/okld/streamlit-pandas-profiling)\n\n[Pandas profiling component for Streamlit. Created by](https://github.com/okld/streamlit-pandas-profiling) [@okld](https://github.com/okld/).\n\n`df = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\nst_profile_report(pr)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\nst.write(value)\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`from streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-metric-cards.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\nstyle_metric_cards()\n`\n\n[![screenshot](/images/api/components/aggrid.jpg)**Streamlit Aggrid**](https://github.com/PablocFonseca/streamlit-aggrid)\n\n[Implementation of Ag-Grid component for Streamlit. Created by](https://github.com/PablocFonseca/streamlit-aggrid) [@PablocFonseca](https://github.com/PablocFonseca).\n\n`df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\nnew_df = grid_return['data']\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/pandas-profiling.jpg)**Pandas Profiling**](https://github.com/okld/streamlit-pandas-profiling)\n\n[Pandas profiling component for Streamlit. Created by](https://github.com/okld/streamlit-pandas-profiling) [@okld](https://github.com/okld/).\n\n`df = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\nst_profile_report(pr)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\nst.write(value)\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`from streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-metric-cards.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\nstyle_metric_cards()\n`\n\nNext\n\n### Chart elements\n\n[![screenshot](/images/api/area_chart.jpg)**Simple area charts** \\\\\nDisplay an area chart.\\\\\n\\\\\n`st.area_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.area_chart) [![screenshot](/images/api/bar_chart.jpg)**Simple bar charts** \\\\\nDisplay a bar chart.\\\\\n\\\\\n`st.bar_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.bar_chart) [![screenshot](/images/api/line_chart.jpg)**Simple line charts** \\\\\nDisplay a line chart.\\\\\n\\\\\n`st.line_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.line_chart) [![screenshot](/images/api/scatter_chart.svg)**Simple scatter charts** \\\\\nDisplay a line chart.\\\\\n\\\\\n`st.scatter_chart(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.scatter_chart) [![screenshot](/images/api/map.jpg)**Scatterplots on maps** \\\\\nDisplay a map with points on it.\\\\\n\\\\\n`st.map(my_data_frame)\\\\\n`](/develop/api-reference/charts/st.map) [![screenshot](/images/api/pyplot.jpg)**Matplotlib** \\\\\nDisplay a matplotlib.pyplot figure.\\\\\n\\\\\n`st.pyplot(my_mpl_figure)\\\\\n`](/develop/api-reference/charts/st.pyplot) [![screenshot](/images/api/vega_lite_chart.jpg)**Altair** \\\\\nDisplay a chart using the Altair library.\\\\\n\\\\\n`st.altair_chart(my_altair_chart)\\\\\n`](/develop/api-reference/charts/st.altair_chart) [![screenshot](/images/api/vega_lite_chart.jpg)**Vega-Lite** \\\\\nDisplay a chart using the Vega-Lite library.\\\\\n\\\\\n`st.vega_lite_chart(my_vega_lite_chart)\\\\\n`](/develop/api-reference/charts/st.vega_lite_chart) [![screenshot](/images/api/plotly_chart.jpg)**Plotly** \\\\\nDisplay an interactive Plotly chart.\\\\\n\\\\\n`st.plotly_chart(my_plotly_chart)\\\\\n`](/develop/api-reference/charts/st.plotly_chart) [![screenshot](/images/api/bokeh_chart.jpg)**Bokeh** \\\\\nDisplay an interactive Bokeh chart.\\\\\n\\\\\n`st.bokeh_chart(my_bokeh_chart)\\\\\n`](/develop/api-reference/charts/st.bokeh_chart) [![screenshot](/images/api/pydeck_chart.jpg)**PyDeck** \\\\\nDisplay a chart using the PyDeck library.\\\\\n\\\\\n`st.pydeck_chart(my_pydeck_chart)\\\\\n`](/develop/api-reference/charts/st.pydeck_chart) [![screenshot](/images/api/graphviz_chart.jpg)**GraphViz** \\\\\nDisplay a graph using the dagre-d3 library.\\\\\n\\\\\n`st.graphviz_chart(my_graphviz_spec)\\\\\n`](/develop/api-reference/charts/st.graphviz_chart)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-chart-annotations.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`chart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n`\n\n[![screenshot](/images/api/components/plost.jpg)**Plost**](https://github.com/tvst/plost)\n\n[A deceptively simple plotting library for Streamlit. Created by](https://github.com/tvst/plost) [@tvst](https://github.com/tvst).\n\n`import plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n`\n\n[![screenshot](/images/api/components/hiplot.jpg)**HiPlot**](https://github.com/facebookresearch/hiplot)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/facebookresearch/hiplot) [@facebookresearch](https://github.com/facebookresearch).\n\n`data = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n`\n\n[![screenshot](/images/api/components/echarts.jpg)**ECharts**](https://github.com/andfanilo/streamlit-echarts)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/andfanilo/streamlit-echarts) [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_echarts import st_echarts\nst_echarts(options=options)\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/spacy.jpg)**Spacy-Streamlit**](https://github.com/explosion/spacy-streamlit)\n\n[spaCy building blocks and visualizers for Streamlit apps. Created by](https://github.com/explosion/spacy-streamlit) [@explosion](https://github.com/explosion).\n\n`models = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n`\n\n[![screenshot](/images/api/components/agraph.jpg)**Streamlit Agraph**](https://github.com/ChrisDelClea/streamlit-agraph)\n\n[A Streamlit Graph Vis, based on](https://github.com/ChrisDelClea/streamlit-agraph) [react-grah-vis](https://github.com/crubier/react-graph-vis). Created by [@ChrisDelClea](https://github.com/ChrisDelClea).\n\n`from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-chart-annotations.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`chart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n`\n\n[![screenshot](/images/api/components/plost.jpg)**Plost**](https://github.com/tvst/plost)\n\n[A deceptively simple plotting library for Streamlit. Created by](https://github.com/tvst/plost) [@tvst](https://github.com/tvst).\n\n`import plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n`\n\n[![screenshot](/images/api/components/hiplot.jpg)**HiPlot**](https://github.com/facebookresearch/hiplot)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/facebookresearch/hiplot) [@facebookresearch](https://github.com/facebookresearch).\n\n`data = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n`\n\n[![screenshot](/images/api/components/echarts.jpg)**ECharts**](https://github.com/andfanilo/streamlit-echarts)\n\n[High dimensional Interactive Plotting. Created by](https://github.com/andfanilo/streamlit-echarts) [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_echarts import st_echarts\nst_echarts(options=options)\n`\n\n[![screenshot](/images/api/components/folium.jpg)**Streamlit Folium**](https://github.com/randyzwitch/streamlit-folium)\n\n[Streamlit Component for rendering Folium maps. Created by](https://github.com/randyzwitch/streamlit-folium) [@randyzwitch](https://github.com/randyzwitch).\n\n`m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n`\n\n[![screenshot](/images/api/components/spacy.jpg)**Spacy-Streamlit**](https://github.com/explosion/spacy-streamlit)\n\n[spaCy building blocks and visualizers for Streamlit apps. Created by](https://github.com/explosion/spacy-streamlit) [@explosion](https://github.com/explosion).\n\n`models = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n`\n\n[![screenshot](/images/api/components/agraph.jpg)**Streamlit Agraph**](https://github.com/ChrisDelClea/streamlit-agraph)\n\n[A Streamlit Graph Vis, based on](https://github.com/ChrisDelClea/streamlit-agraph) [react-grah-vis](https://github.com/crubier/react-graph-vis). Created by [@ChrisDelClea](https://github.com/ChrisDelClea).\n\n`from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/plotly-events.jpg)**Plotly Events**](https://github.com/null-jones/streamlit-plotly-events)\n\n[Make Plotly charts interactive!. Created by](https://github.com/null-jones/streamlit-plotly-events) [@null-jones](https://github.com/null-jones/).\n\n`fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n`\n\n[![screenshot](/images/api/components/extras-chart-annotations.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`chart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n`\n\nNext\n\n### Input widgets\n\n[![screenshot](/images/api/button.svg)**Button** \\\\\nDisplay a button widget.\\\\\n\\\\\n`clicked = st.button(\"Click me\")\\\\\n`](/develop/api-reference/widgets/st.button) [![screenshot](/images/api/download_button.svg)**Download button** \\\\\nDisplay a download button widget.\\\\\n\\\\\n`st.download_button(\"Download file\", file)\\\\\n`](/develop/api-reference/widgets/st.download_button) [![screenshot](/images/api/form_submit_button.svg)**Form button** \\\\\nDisplay a form submit button. For use with `st.form`.\\\\\n\\\\\n`st.form_submit_button(\"Sign up\")\\\\\n`](/develop/api-reference/execution-flow/st.form_submit_button) [![screenshot](/images/api/link_button.svg)**Link button** \\\\\nDisplay a link button.\\\\\n\\\\\n`st.link_button(\"Go to gallery\", url)\\\\\n`](/develop/api-reference/widgets/st.link_button) [![screenshot](/images/api/page_link.jpg)**Page link** \\\\\nDisplay a link to another page in a multipage app.\\\\\n\\\\\n`st.page_link(\"app.py\", label=\"Home\", icon=\"üè†\")\\\\\nst.page_link(\"pages/profile.py\", label=\"My profile\")\\\\\n`](/develop/api-reference/widgets/st.page_link) [![screenshot](/images/api/checkbox.jpg)**Checkbox** \\\\\nDisplay a checkbox widget.\\\\\n\\\\\n`selected = st.checkbox(\"I agree\")\\\\\n`](/develop/api-reference/widgets/st.checkbox) [![screenshot](/images/api/color_picker.jpg)**Color picker** \\\\\nDisplay a color picker widget.\\\\\n\\\\\n`color = st.color_picker(\"Pick a color\")\\\\\n`](/develop/api-reference/widgets/st.color_picker) [![screenshot](/images/api/feedback.jpg)**Feedback** \\\\\nDisplay a rating or sentiment button group.\\\\\n\\\\\n`st.feedback(\"stars\")\\\\\n`](/develop/api-reference/widgets/st.feedback) [![screenshot](/images/api/multiselect.jpg)**Multiselect** \\\\\nDisplay a multiselect widget. The multiselect widget starts as empty.\\\\\n\\\\\n`choices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\\\\\n`](/develop/api-reference/widgets/st.multiselect) [![screenshot](/images/api/pills.jpg)**Pills** \\\\\nDisplay a pill-button selection widget.\\\\\n\\\\\n`st.pills(\"Tags\", [\"Sports\", \"AI\", \"Politics\"])\\\\\n`](/develop/api-reference/widgets/st.pills) [![screenshot](/images/api/radio.jpg)**Radio** \\\\\nDisplay a radio button widget.\\\\\n\\\\\n`choice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\\\\\n`](/develop/api-reference/widgets/st.radio) [![screenshot](/images/api/segmented_control.jpg)**Segmented control** \\\\\nDisplay a segmented-button selection widget.\\\\\n\\\\\n`st.segmented_control(\"Filter\", [\"Open\", \"Closed\", \"All\"])\\\\\n`](/develop/api-reference/widgets/st.segmented_control) [![screenshot](/images/api/selectbox.jpg)**Selectbox** \\\\\nDisplay a select widget.\\\\\n\\\\\n`choice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\\\\\n`](/develop/api-reference/widgets/st.selectbox) [![screenshot](/images/api/select_slider.jpg)**Select-slider** \\\\\nDisplay a slider widget to select items from a list.\\\\\n\\\\\n`size = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\\\\\n`](/develop/api-reference/widgets/st.select_slider) [![screenshot](/images/api/toggle.jpg)**Toggle** \\\\\nDisplay a toggle widget.\\\\\n\\\\\n`activated = st.toggle(\"Activate\")\\\\\n`](/develop/api-reference/widgets/st.toggle) [![screenshot](/images/api/number_input.jpg)**Number input** \\\\\nDisplay a numeric input widget.\\\\\n\\\\\n`choice = st.number_input(\"Pick a number\", 0, 10)\\\\\n`](/develop/api-reference/widgets/st.number_input) [![screenshot](/images/api/slider.jpg)**Slider** \\\\\nDisplay a slider widget.\\\\\n\\\\\n`number = st.slider(\"Pick a number\", 0, 100)\\\\\n`](/develop/api-reference/widgets/st.slider) [![screenshot](/images/api/date_input.jpg)**Date input** \\\\\nDisplay a date input widget.\\\\\n\\\\\n`date = st.date_input(\"Your birthday\")\\\\\n`](/develop/api-reference/widgets/st.date_input) [![screenshot](/images/api/time_input.jpg)**Time input** \\\\\nDisplay a time input widget.\\\\\n\\\\\n`time = st.time_input(\"Meeting time\")\\\\\n`](/develop/api-reference/widgets/st.time_input) [![screenshot](/images/api/chat_input.jpg)**Chat input** \\\\\nDisplay a chat input widget.\\\\\n\\\\\n`prompt = st.chat_input(\"Say something\")\\\\\nif prompt:\\\\\n    st.write(f\"The user has sent: {prompt}\")\\\\\n`](/develop/api-reference/chat/st.chat_input) [![screenshot](/images/api/text_area.jpg)**Text-area** \\\\\nDisplay a multi-line text input widget.\\\\\n\\\\\n`text = st.text_area(\"Text to translate\")\\\\\n`](/develop/api-reference/widgets/st.text_area) [![screenshot](/images/api/text_input.jpg)**Text input** \\\\\nDisplay a single-line text input widget.\\\\\n\\\\\n`name = st.text_input(\"First name\")\\\\\n`](/develop/api-reference/widgets/st.text_input) [![screenshot](/images/api/audio_input.jpg)**Audio input** \\\\\nDisplay a widget that allows users to record with their microphone.\\\\\n\\\\\n`speech = st.audio_input(\"Record a voice message\")\\\\\n`](/develop/api-reference/widgets/st.audio_input) [![screenshot](/images/api/data_editor.jpg)**Data editor** \\\\\nDisplay a data editor widget.\\\\\n\\\\\n`edited = st.data_editor(df, num_rows=\"dynamic\")\\\\\n`](/develop/api-reference/data/st.data_editor) [![screenshot](/images/api/file_uploader.jpg)**File uploader** \\\\\nDisplay a file uploader widget.\\\\\n\\\\\n`data = st.file_uploader(\"Upload a CSV\")\\\\\n`](/develop/api-reference/widgets/st.file_uploader) [![screenshot](/images/api/camera_input.jpg)**Camera input** \\\\\nDisplay a widget that allows users to upload images directly from a camera.\\\\\n\\\\\n`image = st.camera_input(\"Take a picture\")\\\\\n`](/develop/api-reference/widgets/st.camera_input)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/chat.jpg)**Streamlit Chat**](https://github.com/AI-Yash/st-chat)\n\n[Streamlit Component for a Chatbot UI. Created by](https://github.com/AI-Yash/st-chat) [@AI-Yash](https://github.com/AI-Yash).\n\n`from streamlit_chat import message\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n`\n\n[![screenshot](/images/api/components/option-menu.jpg)**Streamlit Option Menu**](https://github.com/victoryhb/streamlit-option-menu)\n\n[Select a single item from a list of options in a menu. Created by](https://github.com/victoryhb/streamlit-option-menu) [@victoryhb](https://github.com/victoryhb).\n\n`from streamlit_option_menu import option_menu\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\nicons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n`\n\n[![screenshot](/images/api/components/extras-toggle.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\", \"\"\"ü•∑ Surprise! Here's some additional content\"\"\",)\n`\n\n[![screenshot](/images/api/components/elements.jpg)**Streamlit Elements**](https://github.com/okld/streamlit-elements)\n\n[Create a draggable and resizable dashboard in Streamlit. Created by](https://github.com/okld/streamlit-elements) [@okls](https://github.com/okls).\n\n`from streamlit_elements import elements, mui, html\nwith elements(\"new_element\"):\nmui.Typography(\"Hello world\")\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`from streamlit_tags import st_tags\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/stqdm.jpg)**Stqdm**](https://github.com/Wirg/stqdm)\n\n[The simplest way to handle a progress bar in streamlit app. Created by](https://github.com/Wirg/stqdm) [@Wirg](https://github.com/Wirg).\n\n`from stqdm import stqdm\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n`\n\n[![screenshot](/images/api/components/timeline.jpg)**Timeline**](https://github.com/innerdoc/streamlit-timeline)\n\n[Display a Timeline in Streamlit apps using](https://github.com/innerdoc/streamlit-timeline) [TimelineJS](https://timeline.knightlab.com/). Created by [@innerdoc](https://github.com/innerdoc).\n\n`from streamlit_timeline import timeline\nwith open('example.json', \"r\") as f:\ntimeline(f.read(), height=800)\n`\n\n[![screenshot](/images/api/components/camera-live.jpg)**Camera input live**](https://github.com/blackary/streamlit-camera-input-live)\n\n[Alternative for st.camera\\_input which returns the webcam images live. Created by](https://github.com/blackary/streamlit-camera-input-live) [@blackary](https://github.com/blackary).\n\n`from camera_input_live import camera_input_live\nimage = camera_input_live()\nst.image(value)\n`\n\n[![screenshot](/images/api/components/ace.jpg)**Streamlit Ace**](https://github.com/okld/streamlit-ace)\n\n[Ace editor component for Streamlit. Created by](https://github.com/okld/streamlit-ace) [@okld](https://github.com/okld).\n\n`from streamlit_ace import st_ace\ncontent = st_ace()\ncontent\n`\n\n[![screenshot](/images/api/components/chat.jpg)**Streamlit Chat**](https://github.com/AI-Yash/st-chat)\n\n[Streamlit Component for a Chatbot UI. Created by](https://github.com/AI-Yash/st-chat) [@AI-Yash](https://github.com/AI-Yash).\n\n`from streamlit_chat import message\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n`\n\n[![screenshot](/images/api/components/option-menu.jpg)**Streamlit Option Menu**](https://github.com/victoryhb/streamlit-option-menu)\n\n[Select a single item from a list of options in a menu. Created by](https://github.com/victoryhb/streamlit-option-menu) [@victoryhb](https://github.com/victoryhb).\n\n`from streamlit_option_menu import option_menu\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\nicons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n`\n\n[![screenshot](/images/api/components/extras-toggle.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\", \"\"\"ü•∑ Surprise! Here's some additional content\"\"\",)\n`\n\n[![screenshot](/images/api/components/elements.jpg)**Streamlit Elements**](https://github.com/okld/streamlit-elements)\n\n[Create a draggable and resizable dashboard in Streamlit. Created by](https://github.com/okld/streamlit-elements) [@okls](https://github.com/okls).\n\n`from streamlit_elements import elements, mui, html\nwith elements(\"new_element\"):\nmui.Typography(\"Hello world\")\n`\n\n[![screenshot](/images/api/components/tags.jpg)**Tags**](https://github.com/gagan3012/streamlit-tags)\n\n[Add tags to your Streamlit apps. Created by](https://github.com/gagan3012/streamlit-tags) [@gagan3012](https://github.com/gagan3012).\n\n`from streamlit_tags import st_tags\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n`\n\n[![screenshot](/images/api/components/stqdm.jpg)**Stqdm**](https://github.com/Wirg/stqdm)\n\n[The simplest way to handle a progress bar in streamlit app. Created by](https://github.com/Wirg/stqdm) [@Wirg](https://github.com/Wirg).\n\n`from stqdm import stqdm\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n`\n\n[![screenshot](/images/api/components/timeline.jpg)**Timeline**](https://github.com/innerdoc/streamlit-timeline)\n\n[Display a Timeline in Streamlit apps using](https://github.com/innerdoc/streamlit-timeline) [TimelineJS](https://timeline.knightlab.com/). Created by [@innerdoc](https://github.com/innerdoc).\n\n`from streamlit_timeline import timeline\nwith open('example.json', \"r\") as f:\ntimeline(f.read(), height=800)\n`\n\n[![screenshot](/images/api/components/camera-live.jpg)**Camera input live**](https://github.com/blackary/streamlit-camera-input-live)\n\n[Alternative for st.camera\\_input which returns the webcam images live. Created by](https://github.com/blackary/streamlit-camera-input-live) [@blackary](https://github.com/blackary).\n\n`from camera_input_live import camera_input_live\nimage = camera_input_live()\nst.image(value)\n`\n\n[![screenshot](/images/api/components/ace.jpg)**Streamlit Ace**](https://github.com/okld/streamlit-ace)\n\n[Ace editor component for Streamlit. Created by](https://github.com/okld/streamlit-ace) [@okld](https://github.com/okld).\n\n`from streamlit_ace import st_ace\ncontent = st_ace()\ncontent\n`\n\n[![screenshot](/images/api/components/chat.jpg)**Streamlit Chat**](https://github.com/AI-Yash/st-chat)\n\n[Streamlit Component for a Chatbot UI. Created by](https://github.com/AI-Yash/st-chat) [@AI-Yash](https://github.com/AI-Yash).\n\n`from streamlit_chat import message\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n`\n\n[![screenshot](/images/api/components/option-menu.jpg)**Streamlit Option Menu**](https://github.com/victoryhb/streamlit-option-menu)\n\n[Select a single item from a list of options in a menu. Created by](https://github.com/victoryhb/streamlit-option-menu) [@victoryhb](https://github.com/victoryhb).\n\n`from streamlit_option_menu import option_menu\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\nicons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n`\n\n[![screenshot](/images/api/components/extras-toggle.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\", \"\"\"ü•∑ Surprise! Here's some additional content\"\"\",)\n`\n\nNext\n\n### Media elements\n\n[![screenshot](/images/api/image.jpg)**Image** \\\\\nDisplay an image or list of images.\\\\\n\\\\\n`st.image(numpy_array)\\\\\nst.image(image_bytes)\\\\\nst.image(file)\\\\\nst.image(\"https://example.com/myimage.jpg\")\\\\\n`](/develop/api-reference/media/st.image) [![screenshot](/images/api/logo.jpg)**Logo** \\\\\nDisplay a logo in the upper-left corner of your app and its sidebar.\\\\\n\\\\\n`st.logo(\"logo.jpg\")\\\\\n`](/develop/api-reference/media/st.logo) [![screenshot](/images/api/audio.jpg)**Audio** \\\\\nDisplay an audio player.\\\\\n\\\\\n`st.audio(numpy_array)\\\\\nst.audio(audio_bytes)\\\\\nst.audio(file)\\\\\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\\\\\n`](/develop/api-reference/media/st.audio) [![screenshot](/images/api/video.jpg)**Video** \\\\\nDisplay a video player.\\\\\n\\\\\n`st.video(numpy_array)\\\\\nst.video(video_bytes)\\\\\nst.video(file)\\\\\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\\\\\n`](/develop/api-reference/media/st.video)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n- <-\n- ->\n\nPrevious\n\n[![screenshot](/images/api/components/cropper.jpg)**Streamlit Cropper**](https://github.com/turner-anderson/streamlit-cropper)\n\n[A simple image cropper for Streamlit. Created by](https://github.com/turner-anderson/streamlit-cropper) [@turner-anderson](https://github.com/turner-anderson).\n\n`from streamlit_cropper import st_cropper\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/webrtc.jpg)**Streamlit Webrtc**](https://github.com/whitphx/streamlit-webrtc)\n\n[Handling and transmitting real-time video/audio streams with Streamlit. Created by](https://github.com/whitphx/streamlit-webrtc) [@whitphx](https://github.com/whitphx).\n\n`from streamlit_webrtc import webrtc_streamer\nwebrtc_streamer(key=\"sample\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_drawable_canvas import st_canvas\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/image-comparison.jpg)**Image Comparison**](https://github.com/fcakyon/streamlit-image-comparison)\n\n[Compare images with a slider using](https://github.com/fcakyon/streamlit-image-comparison) [JuxtaposeJS](https://juxtapose.knightlab.com/). Created by [@fcakyon](https://github.com/fcakyon).\n\n`from streamlit_image_comparison import image_comparison\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n`\n\n[![screenshot](/images/api/components/cropper.jpg)**Streamlit Cropper**](https://github.com/turner-anderson/streamlit-cropper)\n\n[A simple image cropper for Streamlit. Created by](https://github.com/turner-anderson/streamlit-cropper) [@turner-anderson](https://github.com/turner-anderson).\n\n`from streamlit_cropper import st_cropper\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\n[![screenshot](/images/api/components/webrtc.jpg)**Streamlit Webrtc**](https://github.com/whitphx/streamlit-webrtc)\n\n[Handling and transmitting real-time video/audio streams with Streamlit. Created by](https://github.com/whitphx/streamlit-webrtc) [@whitphx](https://github.com/whitphx).\n\n`from streamlit_webrtc import webrtc_streamer\nwebrtc_streamer(key=\"sample\")\n`\n\n[![screenshot](/images/api/components/drawable-canvas.jpg)**Drawable Canvas**](https://github.com/andfanilo/streamlit-drawable-canvas)\n\n[Provides a sketching canvas using](https://github.com/andfanilo/streamlit-drawable-canvas) [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n`from streamlit_drawable_canvas import st_canvas\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n`\n\n[![screenshot](/images/api/components/image-comparison.jpg)**Image Comparison**](https://github.com/fcakyon/streamlit-image-comparison)\n\n[Compare images with a slider using](https://github.com/fcakyon/streamlit-image-comparison) [JuxtaposeJS](https://juxtapose.knightlab.com/). Created by [@fcakyon](https://github.com/fcakyon).\n\n`from streamlit_image_comparison import image_comparison\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n`\n\n[![screenshot](/images/api/components/cropper.jpg)**Streamlit Cropper**](https://github.com/turner-anderson/streamlit-cropper)\n\n[A simple image cropper for Streamlit. Created by](https://github.com/turner-anderson/streamlit-cropper) [@turner-anderson](https://github.com/turner-anderson).\n\n`from streamlit_cropper import st_cropper\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n`\n\n[![screenshot](/images/api/components/image-coordinates.jpg)**Image Coordinates**](https://github.com/blackary/streamlit-image-coordinates)\n\n[Get the coordinates of clicks on an image. Created by](https://github.com/blackary/streamlit-image-coordinates) [@blackary](https://github.com/blackary/).\n\n`from streamlit_image_coordinates import streamlit_image_coordinates\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n`\n\n[![screenshot](/images/api/components/lottie.jpg)**Streamlit Lottie**](https://github.com/andfanilo/streamlit-lottie)\n\n[Integrate](https://github.com/andfanilo/streamlit-lottie) [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n`lottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n`\n\nNext\n\n### Layouts and containers\n\n[![screenshot](/images/api/columns.jpg)**Columns** \\\\\nInsert containers laid out as side-by-side columns.\\\\\n\\\\\n`col1, col2 = st.columns(2)\\\\\ncol1.write(\"this is column 1\")\\\\\ncol2.write(\"this is column 2\")\\\\\n`](/develop/api-reference/layout/st.columns) [![screenshot](/images/api/container.jpg)**Container** \\\\\nInsert a multi-element container.\\\\\n\\\\\n`c = st.container()\\\\\nst.write(\"This will show last\")\\\\\nc.write(\"This will show first\")\\\\\nc.write(\"This will show second\")\\\\\n`](/develop/api-reference/layout/st.container) [![screenshot](/images/api/dialog.jpg)**Modal dialog** \\\\\nInsert a modal dialog that can rerun independently from the rest of the script.\\\\\n\\\\\n`@st.dialog(\"Sign up\")\\\\\ndef email_form():\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n`](/develop/api-reference/execution-flow/st.dialog) [![screenshot](/images/api/empty.jpg)**Empty** \\\\\nInsert a single-element container.\\\\\n\\\\\n`c = st.empty()\\\\\nst.write(\"This will show last\")\\\\\nc.write(\"This will be replaced\")\\\\\nc.write(\"This will show first\")\\\\\n`](/develop/api-reference/layout/st.empty) [![screenshot](/images/api/expander.jpg)**Expander** \\\\\nInsert a multi-element container that can be expanded/collapsed.\\\\\n\\\\\n`with st.expander(\"Open to see more\"):\\\\\nst.write(\"This is more content\")\\\\\n`](/develop/api-reference/layout/st.expander) [![screenshot](/images/api/popover.svg)**Popover** \\\\\nInsert a multi-element popover container that can be opened/closed.\\\\\n\\\\\n`with st.popover(\"Settings\"):\\\\\nst.checkbox(\"Show completed\")\\\\\n`](/develop/api-reference/layout/st.popover) [![screenshot](/images/api/sidebar.jpg)**Sidebar** \\\\\nDisplay items in a sidebar.\\\\\n\\\\\n`st.sidebar.write(\"This lives in the sidebar\")\\\\\nst.sidebar.button(\"Click me!\")\\\\\n`](/develop/api-reference/layout/st.sidebar) [![screenshot](/images/api/tabs.jpg)**Tabs** \\\\\nInsert containers separated into tabs.\\\\\n\\\\\n`tab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\\\\\ntab1.write(\"this is tab 1\")\\\\\ntab2.write(\"this is tab 2\")\\\\\n`](/develop/api-reference/layout/st.tabs)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/elements.jpg)**Streamlit Elements**](https://github.com/okld/streamlit-elements)\n\n[Create a draggable and resizable dashboard in Streamlit. Created by](https://github.com/okld/streamlit-elements) [@okls](https://github.com/okls).\n\n`from streamlit_elements import elements, mui, html\nwith elements(\"new_element\"):\nmui.Typography(\"Hello world\")\n`\n\n[![screenshot](/images/api/components/pydantic.jpg)**Pydantic**](https://github.com/lukasmasuch/streamlit-pydantic)\n\n[Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by](https://github.com/lukasmasuch/streamlit-pydantic) [@lukasmasuch](https://github.com/lukasmasuch).\n\n`import streamlit_pydantic as sp\nsp.pydantic_form(key=\"my_form\",\nmodel=ExampleModel)\n`\n\n[![screenshot](/images/api/components/pages.jpg)**Streamlit Pages**](https://github.com/blackary/st_pages)\n\n[An experimental version of Streamlit Multi-Page Apps. Created by](https://github.com/blackary/st_pages) [@blackary](https://github.com/blackary).\n\n`from st_pages import Page, show_pages, add_page_title\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"üè†\"),\\\nPage(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n`\n\n### Chat elements\n\nStreamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.\n\n`st.chat_message` lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. `st.chat_input` lets you display a chat input widget so the user can type in a message.\n\n[![screenshot](/images/api/chat_input.jpg)**Chat input** \\\\\nDisplay a chat input widget.\\\\\n\\\\\n`prompt = st.chat_input(\"Say something\")\\\\\nif prompt:\\\\\n    st.write(f\"The user has sent: {prompt}\")\\\\\n`](/develop/api-reference/chat/st.chat_input) [![screenshot](/images/api/chat_message.jpg)**Chat message** \\\\\nInsert a chat message container.\\\\\n\\\\\n`import numpy as np\\\\\nwith st.chat_message(\"user\"):\\\\\n    st.write(\"Hello üëã\")\\\\\n    st.line_chart(np.random.randn(30, 3))\\\\\n`](/develop/api-reference/chat/st.chat_message) [![screenshot](/images/api/status.jpg)**Status container** \\\\\nDisplay output of long-running tasks in a container.\\\\\n\\\\\n`with st.status('Running'):\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.status) [**st.write\\_stream** \\\\\nWrite generators or streams to the app with a typewriter effect.\\\\\n\\\\\n`st.write_stream(my_generator)\\\\\nst.write_stream(my_llm_stream)\\\\\n`](/develop/api-reference/write-magic/st.write_stream)\n\n### Status elements\n\n[![screenshot](/images/api/progress.jpg)**Progress bar** \\\\\nDisplay a progress bar.\\\\\n\\\\\n`for i in range(101):\\\\\nst.progress(i)\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.progress) [![screenshot](/images/api/spinner.jpg)**Spinner** \\\\\nTemporarily displays a message while executing a block of code.\\\\\n\\\\\n`with st.spinner(\"Please wait...\"):\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.spinner) [![screenshot](/images/api/status.jpg)**Status container** \\\\\nDisplay output of long-running tasks in a container.\\\\\n\\\\\n`with st.status('Running'):\\\\\ndo_something_slow()\\\\\n`](/develop/api-reference/status/st.status) [![screenshot](/images/api/toast.jpg)**Toast** \\\\\nBriefly displays a toast message in the bottom-right corner.\\\\\n\\\\\n`st.toast('Butter!', icon='üßà')\\\\\n`](/develop/api-reference/status/st.toast) [![screenshot](/images/api/balloons.jpg)**Balloons** \\\\\nDisplay celebratory balloons!\\\\\n\\\\\n`do_something()\\\\\n# Celebrate when all done!\\\\\nst.balloons()\\\\\n`](/develop/api-reference/status/st.balloons) [![screenshot](/images/api/snow.jpg)**Snowflakes** \\\\\nDisplay celebratory snowflakes!\\\\\n\\\\\n`do_something()\\\\\n# Celebrate when all done!\\\\\nst.snow()\\\\\n`](/develop/api-reference/status/st.snow) [![screenshot](/images/api/success.jpg)**Success box** \\\\\nDisplay a success message.\\\\\n\\\\\n`st.success(\"Match found!\")\\\\\n`](/develop/api-reference/status/st.success) [![screenshot](/images/api/info.jpg)**Info box** \\\\\nDisplay an informational message.\\\\\n\\\\\n`st.info(\"Dataset is updated every day at midnight.\")\\\\\n`](/develop/api-reference/status/st.info) [![screenshot](/images/api/warning.jpg)**Warning box** \\\\\nDisplay warning message.\\\\\n\\\\\n`st.warning(\"Unable to fetch image. Skipping...\")\\\\\n`](/develop/api-reference/status/st.warning) [![screenshot](/images/api/error.jpg)**Error box** \\\\\nDisplay error message.\\\\\n\\\\\n`st.error(\"We encountered an error\")\\\\\n`](/develop/api-reference/status/st.error) [![screenshot](/images/api/exception.jpg)**Exception output** \\\\\nDisplay an exception.\\\\\n\\\\\n`e = RuntimeError(\"This is an exception of type RuntimeError\")\\\\\nst.exception(e)\\\\\n`](/develop/api-reference/status/st.exception)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/stqdm.jpg)**Stqdm**](https://github.com/Wirg/stqdm)\n\n[The simplest way to handle a progress bar in streamlit app. Created by](https://github.com/Wirg/stqdm) [@Wirg](https://github.com/Wirg).\n\n`from stqdm import stqdm\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n`\n\n[![screenshot](/images/api/components/custom-notification-box.jpg)**Custom notification box**](https://github.com/Socvest/streamlit-custom-notification-box)\n\n[A custom notification box with the ability to close it out. Created by](https://github.com/Socvest/streamlit-custom-notification-box) [@Socvest](https://github.com/Socvest).\n\n`from streamlit_custom_notification_box import custom_notification_box\nstyles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}\ncustom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key=\"foo\")\n`\n\n[![screenshot](/images/api/components/extras-emojis.jpg)**Streamlit Extras**](https://extras.streamlit.app/)\n\n[A library with useful Streamlit extras. Created by](https://extras.streamlit.app/) [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n`from streamlit_extras.let_it_rain import rain\nrain(emoji=\"üéà\", font_size=54,\nfalling_speed=5, animation_length=\"infinite\",)\n`\n\n## App logic and configuration\n\n### Navigation and pages\n\n[![screenshot](/images/api/navigation.jpg)**Navigation** \\\\\nConfigure the available pages in a multipage app.\\\\\n\\\\\n`st.navigation({\\\\\n    \"Your account\" : [log_out, settings],\\\\\n    \"Reports\" : [overview, usage],\\\\\n    \"Tools\" : [search]\\\\\n})\\\\\n`](/develop/api-reference/navigation/st.navigation) [![screenshot](/images/api/page.jpg)**Page** \\\\\nDefine a page in a multipage app.\\\\\n\\\\\n`home = st.Page(\\\\\n    \"home.py\",\\\\\n    title=\"Home\",\\\\\n    icon=\":material/home:\"\\\\\n)\\\\\n`](/develop/api-reference/navigation/st.page) [![screenshot](/images/api/page_link.jpg)**Page link** \\\\\nDisplay a link to another page in a multipage app.\\\\\n\\\\\n`st.page_link(\"app.py\", label=\"Home\", icon=\"üè†\")\\\\\nst.page_link(\"pages/profile.py\", label=\"My profile\")\\\\\n`](/develop/api-reference/widgets/st.page_link) [**Switch page** \\\\\nProgrammatically navigates to a specified page.\\\\\n\\\\\n`st.switch_page(\"pages/my_page.py\")\\\\\n`](/develop/api-reference/navigation/st.switch_page)\n\n### Execution flow\n\n[![screenshot](/images/api/dialog.jpg)**Modal dialog** \\\\\nInsert a modal dialog that can rerun independently from the rest of the script.\\\\\n\\\\\n`@st.dialog(\"Sign up\")\\\\\ndef email_form():\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n`](/develop/api-reference/execution-flow/st.dialog) [**Forms** \\\\\nCreate a form that batches elements together with a ‚ÄúSubmit\" button.\\\\\n\\\\\n`with st.form(key='my_form'):\\\\\n    name = st.text_input(\"Name\")\\\\\n    email = st.text_input(\"Email\")\\\\\n    st.form_submit_button(\"Sign up\")\\\\\n`](/develop/api-reference/execution-flow/st.form) [**Fragments** \\\\\nDefine a fragment to rerun independently from the rest of the script.\\\\\n\\\\\n`@st.fragment(run_every=\"10s\")\\\\\ndef fragment():\\\\\n    df = get_data()\\\\\n    st.line_chart(df)\\\\\n`](/develop/api-reference/execution-flow/st.fragment) [**Rerun script** \\\\\nRerun the script immediately.\\\\\n\\\\\n`st.rerun()\\\\\n`](/develop/api-reference/execution-flow/st.rerun) [**Stop execution** \\\\\nStops execution immediately.\\\\\n\\\\\n`st.stop()\\\\\n`](/develop/api-reference/execution-flow/st.stop)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/autorefresh.jpg)**Autorefresh**](https://github.com/kmcgrady/streamlit-autorefresh)\n\n[Force a refresh without tying up a script. Created by](https://github.com/kmcgrady/streamlit-autorefresh) [@kmcgrady](https://github.com/kmcgrady).\n\n`from streamlit_autorefresh import st_autorefresh\nst_autorefresh(interval=2000, limit=100,\nkey=\"fizzbuzzcounter\")\n`\n\n[![screenshot](/images/api/components/pydantic.jpg)**Pydantic**](https://github.com/lukasmasuch/streamlit-pydantic)\n\n[Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by](https://github.com/lukasmasuch/streamlit-pydantic) [@lukasmasuch](https://github.com/lukasmasuch).\n\n`import streamlit_pydantic as sp\nsp.pydantic_form(key=\"my_form\",\nmodel=ExampleModel)\n`\n\n[![screenshot](/images/api/components/pages.jpg)**Streamlit Pages**](https://github.com/blackary/st_pages)\n\n[An experimental version of Streamlit Multi-Page Apps. Created by](https://github.com/blackary/st_pages) [@blackary](https://github.com/blackary).\n\n`from st_pages import Page, show_pages, add_page_title\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"üè†\"),\\\nPage(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n`\n\n### Caching and state\n\n[**Cache data** \\\\\nFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).\\\\\n\\\\\n`@st.cache_data\\\\\ndef long_function(param1, param2):\\\\\n# Perform expensive computation here or\\\\\n# fetch data from the web here\\\\\nreturn data\\\\\n`](/develop/api-reference/caching-and-state/st.cache_data) [**Cache resource** \\\\\nFunction decorator to cache functions that return global resources (e.g. database connections, ML models).\\\\\n\\\\\n`@st.cache_resource\\\\\ndef init_model():\\\\\n# Return a global resource here\\\\\nreturn pipeline(\\\\\n    \"sentiment-analysis\",\\\\\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\\\\\n)\\\\\n`](/develop/api-reference/caching-and-state/st.cache_resource) [**Session state** \\\\\nSession state is a way to share variables between reruns, for each user session.\\\\\n\\\\\n`st.session_state['key'] = value\\\\\n`](/develop/api-reference/caching-and-state/st.session_state) [**Query parameters** \\\\\nGet, set, or clear the query parameters that are shown in the browser's URL bar.\\\\\n\\\\\n`st.query_params[key] = value\\\\\nst.query_params.clear()\\\\\n`](/develop/api-reference/caching-and-state/st.query_params)\n\n### Connections and databases\n\n#### Setup your connection\n\n[![screenshot](/images/api/connection.svg)**Create a connection** \\\\\nConnect to a data source or API\\\\\n\\\\\n`conn = st.connection('pets_db', type='sql')\\\\\npet_owners = conn.query('select * from pet_owners')\\\\\nst.dataframe(pet_owners)\\\\\n`](/develop/api-reference/connections/st.connection)\n\n#### Built-in connections\n\n[![screenshot](/images/api/connections.SnowflakeConnection.svg)**SnowflakeConnection** \\\\\nA connection to Snowflake.\\\\\n\\\\\n`conn = st.connection('snowflake')\\\\\n`](/develop/api-reference/connections/st.connections.snowflakeconnection) [![screenshot](/images/api/connections.SQLConnection.svg)**SQLConnection** \\\\\nA connection to a SQL database using SQLAlchemy.\\\\\n\\\\\n`conn = st.connection('sql')\\\\\n`](/develop/api-reference/connections/st.connections.sqlconnection)\n\n#### Build your own connections\n\n[**Connection base class** \\\\\nBuild your own connection with `BaseConnection`.\\\\\n\\\\\n`class MyConnection(BaseConnection[myconn.MyConnection]):\\\\\n    def _connect(self, **kwargs) -> MyConnection:\\\\\n        return myconn.connect(**self._secrets, **kwargs)\\\\\n    def query(self, query):\\\\\n        return self._instance.query(query)\\\\\n`](/develop/api-reference/connections/st.connections.baseconnection)\n\n#### Secrets management\n\n[**Secrets singleton** \\\\\nAccess secrets from a local TOML file.\\\\\n\\\\\n`key = st.secrets[\"OpenAI_key\"]\\\\\n`](/develop/api-reference/connections/st.secrets) [**Secrets file** \\\\\nSave your secrets in a per-project or per-profile TOML file.\\\\\n\\\\\n`OpenAI_key = \"<YOUR_SECRET_KEY>\"\\\\\n`](/develop/api-reference/connections/secrets.toml)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/authenticator.jpg)**Authenticator**](https://github.com/mkhorasani/Streamlit-Authenticator)\n\n[A secure authentication module to validate user credentials. Created by](https://github.com/mkhorasani/Streamlit-Authenticator) [@mkhorasani](https://github.com/mkhorasani).\n\n`import streamlit_authenticator as stauth\nauthenticator = stauth.Authenticate( config['credentials'], config['cookie']['name'],\nconfig['cookie']['key'], config['cookie']['expiry_days'], config['preauthorized'])\n`\n\n[![screenshot](/images/api/components/localstorage.jpg)**WS localStorage**](https://github.com/gagangoku/streamlit-ws-localstorage)\n\n[A simple synchronous way of accessing localStorage from your app. Created by](https://github.com/gagangoku/streamlit-ws-localstorage) [@gagangoku](https://github.com/gagangoku).\n\n`from streamlit_ws_localstorage import injectWebsocketCode\nret = conn.setLocalStorageVal(key='k1', val='v1')\nst.write('ret: ' + ret)\n`\n\n[![screenshot](/images/api/components/auth0.jpg)**Streamlit Auth0**](https://github.com/conradbez/streamlit-auth0)\n\n[The fastest way to provide comprehensive login inside Streamlit. Created by](https://github.com/conradbez/streamlit-auth0) [@conradbez](https://github.com/conradbez).\n\n`from auth0_component import login_button\nuser_info = login_button(clientId, domain = domain)\nst.write(user_info)\n`\n\n### Custom Components\n\n[**Declare a component** \\\\\nCreate and register a custom component.\\\\\n\\\\\n`from st.components.v1 import declare_component\\\\\ndeclare_component(\\\\\n    \"custom_slider\",\\\\\n    \"/frontend\",\\\\\n)\\\\\n`](/develop/api-reference/custom-components/st.components.v1.declare_component) [**HTML** \\\\\nDisplay an HTML string in an iframe.\\\\\n\\\\\n`from st.components.v1 import html\\\\\nhtml(\\\\\n    \"<p>Foo bar.</p>\"\\\\\n)\\\\\n`](/develop/api-reference/custom-components/st.components.v1.html) [**iframe** \\\\\nLoad a remote URL in an iframe.\\\\\n\\\\\n`from st.components.v1 import iframe\\\\\niframe(\\\\\n    \"docs.streamlit.io\"\\\\\n)\\\\\n`](/develop/api-reference/custom-components/st.components.v1.iframe)\n\n### Utilities and user info\n\n[**Context** \\\\\n`st.context` provides a read-only interface to access cookies and headers.\\\\\n\\\\\n`st.context.cookies\\\\\nst.context.headers\\\\\n`](/develop/api-reference/utilities/st.context) [**Get help** \\\\\nDisplay object‚Äôs doc string, nicely formatted.\\\\\n\\\\\n`st.help(st.write)\\\\\nst.help(pd.DataFrame)\\\\\n`](/develop/api-reference/utilities/st.help) [**Render HTML** \\\\\nRenders HTML strings to your app.\\\\\n\\\\\n`st.html(\"<p>Foo bar.</p>\")\\\\\n`](/develop/api-reference/utilities/st.html) [**User info** \\\\\n`st.experimental_user` returns information about the logged-in user of private apps on Streamlit Community Cloud.\\\\\n\\\\\n`if st.experimental_user.email == \"foo@corp.com\":\\\\\nst.write(\"Welcome back, \", st.experimental_user.email)\\\\\nelse:\\\\\nst.write(\"You are not authorized to view this page.\")\\\\\n`](/develop/api-reference/utilities/st.experimental_user)\n\n### Configuration\n\n[**Configuration file** \\\\\nConfigures the default settings for your app.\\\\\n\\\\\n`your-project/\\\\\n‚îú‚îÄ‚îÄ .streamlit/\\\\\n‚îÇ   ‚îî‚îÄ‚îÄ config.toml\\\\\n‚îî‚îÄ‚îÄ your_app.py\\\\\n`](/develop/api-reference/configuration/config.toml) [**Get config option** \\\\\nRetrieve a single configuration option.\\\\\n\\\\\n`st.get_option(\"theme.primaryColor\")\\\\\n`](/develop/api-reference/configuration/st.get_option) [**Set config option** \\\\\nSet a single configuration option. (This is very limited.)\\\\\n\\\\\n`st.set_option(\"deprecation.showPyplotGlobalUse\", False)\\\\\n`](/develop/api-reference/configuration/st.set_option) [**Set page title, favicon, and more** \\\\\nConfigures the default settings of the page.\\\\\n\\\\\n`st.set_page_config(\\\\\npage_title=\"My app\",\\\\\npage_icon=\":shark:\",\\\\\n)\\\\\n`](/develop/api-reference/configuration/st.set_page_config)\n\n## Developer tools\n\n### App testing\n\n[**st.testing.v1.AppTest** \\\\\n`st.testing.v1.AppTest` simulates a running Streamlit app for testing.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\nat = AppTest.from_file(\"streamlit_app.py\")\\\\\nat.secrets[\"WORD\"] = \"Foobar\"\\\\\nat.run()\\\\\nassert not at.exception\\\\\nat.text_input(\"word\").input(\"Bazbat\").run()\\\\\nassert at.warning[0].value == \"Try again.\"\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest) [**AppTest.from\\_file** \\\\\n`st.testing.v1.AppTest.from_file` initializes a simulated app from a file.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\nat = AppTest.from_file(\"streamlit_app.py\")\\\\\nat.run()\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_file) [**AppTest.from\\_string** \\\\\n`st.testing.v1.AppTest.from_string` initializes a simulated app from a string.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\nat = AppTest.from_string(app_script_as_string)\\\\\nat.run()\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_string) [**AppTest.from\\_function** \\\\\n`st.testing.v1.AppTest.from_function` initializes a simulated app from a function.\\\\\n\\\\\n`from streamlit.testing.v1 import AppTest\\\\\nat = AppTest.from_function(app_script_as_callable)\\\\\nat.run()\\\\\n`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function) [**Block** \\\\\nA representation of container elements, including:\\\\\n\\\\\n- `st.chat_message`\\\\\n- `st.columns`\\\\\n- `st.sidebar`\\\\\n- `st.tabs`\\\\\n- The main body of the app.\\\\\n\\\\\n`# at.sidebar returns a Block\\\\\nat.sidebar.button[0].click().run()\\\\\nassert not at.exception\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeblock) [**Element** \\\\\nThe base class for representation of all elements, including:\\\\\n\\\\\n- `st.title`\\\\\n- `st.header`\\\\\n- `st.markdown`\\\\\n- `st.dataframe`\\\\\n\\\\\n`# at.title returns a sequence of Title\\\\\n# Title inherits from Element\\\\\nassert at.title[0].value == \"My awesome app\"\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeelement) [**Button** \\\\\nA representation of `st.button` and `st.form_submit_button`.\\\\\n\\\\\n`at.button[0].click().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treebutton) [**ChatInput** \\\\\nA representation of `st.chat_input`.\\\\\n\\\\\n`at.chat_input[0].set_value(\"What is Streamlit?\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treechatinput) [**Checkbox** \\\\\nA representation of `st.checkbox`.\\\\\n\\\\\n`at.checkbox[0].check().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecheckbox) [**ColorPicker** \\\\\nA representation of `st.color_picker`.\\\\\n\\\\\n`at.color_picker[0].pick(\"#FF4B4B\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecolorpicker) [**DateInput** \\\\\nA representation of `st.date_input`.\\\\\n\\\\\n`release_date = datetime.date(2023, 10, 26)\\\\\nat.date_input[0].set_value(release_date).run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treedateinput) [**Multiselect** \\\\\nA representation of `st.multiselect`.\\\\\n\\\\\n`at.multiselect[0].select(\"New York\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treemultiselect) [**NumberInput** \\\\\nA representation of `st.number_input`.\\\\\n\\\\\n`at.number_input[0].increment().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treenumberinput) [**Radio** \\\\\nA representation of `st.radio`.\\\\\n\\\\\n`at.radio[0].set_value(\"New York\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeradio) [**SelectSlider** \\\\\nA representation of `st.select_slider`.\\\\\n\\\\\n`at.select_slider[0].set_range(\"A\",\"C\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectslider) [**Selectbox** \\\\\nA representation of `st.selectbox`.\\\\\n\\\\\n`at.selectbox[0].select(\"New York\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectbox) [**Slider** \\\\\nA representation of `st.slider`.\\\\\n\\\\\n`at.slider[0].set_range(2,5).run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeslider) [**TextArea** \\\\\nA representation of `st.text_area`.\\\\\n\\\\\n`at.text_area[0].input(\"Streamlit is awesome!\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextarea) [**TextInput** \\\\\nA representation of `st.text_input`.\\\\\n\\\\\n`at.text_input[0].input(\"Streamlit\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextinput) [**TimeInput** \\\\\nA representation of `st.time_input`.\\\\\n\\\\\n`at.time_input[0].increment().run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetimeinput) [**Toggle** \\\\\nA representation of `st.toggle`.\\\\\n\\\\\n`at.toggle[0].set_value(\"True\").run()\\\\\n`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetoggle)\n\nThird-party components\n\nThese are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!\n\n[![screenshot](/images/api/components/pandas-profiling.jpg)**Pandas Profiling**](https://github.com/okld/streamlit-pandas-profiling)\n\n[Pandas profiling component for Streamlit. Created by](https://github.com/okld/streamlit-pandas-profiling) [@okld](https://github.com/okld/).\n\n`df = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\nst_profile_report(pr)\n`\n\n[![screenshot](/images/api/components/ace.jpg)**Streamlit Ace**](https://github.com/okld/streamlit-ace)\n\n[Ace editor component for Streamlit. Created by](https://github.com/okld/streamlit-ace) [@okld](https://github.com/okld).\n\n`from streamlit_ace import st_ace\ncontent = st_ace()\ncontent\n`\n\n[![screenshot](/images/api/components/analytics.jpg)**Streamlit Analytics**](https://github.com/jrieke/streamlit-analytics)\n\n[Track & visualize user interactions with your streamlit app. Created by](https://github.com/jrieke/streamlit-analytics) [@jrieke](https://github.com/jrieke).\n\n`import streamlit_analytics\nwith streamlit_analytics.track():\n    st.text_input(\"Write something\")\n`\n\n[Previous: Concepts](/develop/concepts) [Next: Write and magic](/develop/api-reference/write-magic)_forum_\n\n### Still have questions?\n\nOur [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.\n\n[iframe](https://www.google.com/recaptcha/enterprise/anchor?ar=1&k=6Lck4YwlAAAAAEIE1hR--varWp0qu9F-8-emQn2v&co=aHR0cHM6Ly9kb2NzLnN0cmVhbWxpdC5pbzo0NDM.&hl=en&v=pPK749sccDmVW_9DSeTMVvh2&size=invisible&cb=a1setlp7v6mf)",
    "metadata": {
      "url": "https://docs.streamlit.io/develop/api-reference",
      "ogUrl": "https://docs.streamlit.io/",
      "title": "API Reference - Streamlit Docs",
      "og:url": "https://docs.streamlit.io/",
      "og:type": "website",
      "ogImage": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "ogTitle": "API Reference - Streamlit Docs",
      "og:image": "https://docs.streamlit.io/sharing-image-facebook.jpg",
      "og:title": "API Reference - Streamlit Docs",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.streamlit.io/develop/api-reference",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.streamlit.io/sharing-image-twitter.jpg",
      "twitter:title": "API Reference - Streamlit Docs",
      "next-head-count": "14",
      "ogLocaleAlternate": []
    }
  }
]